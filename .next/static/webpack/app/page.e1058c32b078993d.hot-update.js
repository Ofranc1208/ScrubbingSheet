"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./utils/parsers/paymentParser.ts":
/*!****************************************!*\
  !*** ./utils/parsers/paymentParser.ts ***!
  \****************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parsePayment: function() { return /* binding */ parsePayment; }\n/* harmony export */ });\n/**\n * Parser for payment information (LCP amount, frequency, annual increase)\n */ function parsePayment(rawText) {\n    const result = {};\n    // Extract Payment Type and LCP Amount\n    // Logic:\n    // 1. Ignore GP (Guaranteed Payments) - only focus on LCP rows\n    // 2. Use the LCP column value (last column) as the available amount\n    // 3. Find first LCP payment where LCP column > $0 (available payments)\n    // Pattern: Date\\tPayment\\tType\\tSold\\tGuaranteed\\tLCP\n    // Example: 11/1/2025\\t$11,610.60\\tLCP\\t$6,501.94\\t$0.00\\t$5,108.66\n    //          (LCP column = $5,108.66 is the available amount to quote)\n    const paymentRowRegex = /(\\d{1,2}\\/\\d{1,2}\\/\\d{4})\\s+\\$?[\\d,]+\\.?\\d*\\s+(LCP|GP|Guaranteed|COLA)\\s+\\$?([\\d,]+\\.?\\d*)\\s+\\$?([\\d,]+\\.?\\d*)\\s+\\$?([\\d,]+\\.?\\d*)/g;\n    let match;\n    const lcpRows = [];\n    while((match = paymentRowRegex.exec(rawText)) !== null){\n        const dateStr = match[1];\n        const type = match[2];\n        const soldAmount = parseFloat(match[3].replace(/,/g, \"\"));\n        const lcpAmount = parseFloat(match[5].replace(/,/g, \"\"));\n        // Only process LCP type rows\n        if (type !== \"LCP\") continue;\n        // Only include rows where LCP column has available amount > 0\n        if (!(lcpAmount > 0)) continue;\n        const [m, d, y] = dateStr.split(\"/\").map(Number);\n        const date = new Date(y, m - 1, d);\n        lcpRows.push({\n            date,\n            dateStr,\n            sold: soldAmount,\n            lcp: lcpAmount\n        });\n    }\n    if (lcpRows.length > 0) {\n        // Sort by ascending date\n        lcpRows.sort((a, b)=>a.date.getTime() - b.date.getTime());\n        // Start Date Logic: MAX(6 months from today, first available LCP date)\n        const today = new Date();\n        // Calculate 6 months from today properly\n        let sixMonthsLater = new Date(today);\n        sixMonthsLater.setMonth(sixMonthsLater.getMonth() + 6);\n        const firstLcpDate = lcpRows[0].date;\n        // Use whichever is later\n        const startDate = firstLcpDate > sixMonthsLater ? firstLcpDate : sixMonthsLater;\n        // Format date as M/D/YYYY\n        const startMonth = startDate.getMonth() + 1;\n        const startDay = startDate.getDate();\n        const startYear = startDate.getFullYear();\n        result.paymentStartDate = \"\".concat(startMonth, \"/\").concat(startDay, \"/\").concat(startYear);\n        // Note: End date will be calculated in accessDataParser.ts using age rule\n        // (TODAY + MIN(30 years, 75 - age)), not from payment table\n        result.paymentEndDate = lcpRows[lcpRows.length - 1].dateStr;\n        // Payment amount should be the first available LCP amount\n        result.typeOfPayment = \"LCP\";\n        result.paymentAmount = lcpRows[0].lcp.toFixed(2);\n    }\n    // Fallback: If no LCP found with new logic, try old pattern (kept for safety)\n    if (!result.paymentAmount) {\n        const fallbackMatch = rawText.match(/\\d{1,2}\\/\\d{1,2}\\/\\d{4}\\s+\\$?[\\d,]+\\.?\\d*\\s+LCP\\s+\\$?[\\d,]+\\.?\\d*\\s+\\$?[\\d,]+\\.?\\d*\\s+\\$?([\\d,]+\\.?\\d*)/);\n        if (fallbackMatch) {\n            const amount = fallbackMatch[1].replace(/,/g, \"\");\n            if (parseFloat(amount) > 0) {\n                result.paymentAmount = amount;\n                result.typeOfPayment = \"LCP\";\n            }\n        }\n    }\n    // Determine payment frequency and handle annual payments\n    // Check for annual payments (same month, different years)\n    const annualPaymentPattern = /\\d{1,2}\\/\\d{1,2}\\/\\d{4}\\s+\\$[\\d,]+\\.?\\d*.*\\n.*\\d{1,2}\\/\\d{1,2}\\/\\d{4}\\s+\\$[\\d,]+\\.?\\d*/;\n    if (annualPaymentPattern.test(rawText)) {\n        // Check if payments are in the same month (annual) or different months (monthly)\n        const paymentLines = rawText.match(/\\d{1,2}\\/\\d{1,2}\\/\\d{4}\\s+\\$[\\d,]+\\.?\\d*/g) || [];\n        if (paymentLines.length >= 2) {\n            var _paymentLines_, _paymentLines_1;\n            const firstPayment = (_paymentLines_ = paymentLines[0]) === null || _paymentLines_ === void 0 ? void 0 : _paymentLines_.match(/(\\d{1,2})\\/\\d{1,2}\\/\\d{4}/);\n            const secondPayment = (_paymentLines_1 = paymentLines[1]) === null || _paymentLines_1 === void 0 ? void 0 : _paymentLines_1.match(/(\\d{1,2})\\/\\d{1,2}\\/\\d{4}/);\n            if (firstPayment && secondPayment) {\n                const firstMonth = parseInt(firstPayment[1]);\n                const secondMonth = parseInt(secondPayment[1]);\n                if (firstMonth === secondMonth) {\n                    // Same month = annual payments\n                    result.paymentFrequency = \"Annual\";\n                } else {\n                    // Different months = monthly payments\n                    result.paymentFrequency = \"Monthly\";\n                }\n            } else {\n                result.paymentFrequency = \"Monthly\" // Default fallback\n                ;\n            }\n        } else {\n            result.paymentFrequency = \"Monthly\" // Default fallback\n            ;\n        }\n    } else {\n        result.paymentFrequency = \"Monthly\" // Default fallback\n        ;\n    }\n    // If annual payments detected, convert to monthly equivalent\n    if (result.paymentFrequency === \"Annual\" && result.paymentAmount) {\n        const annualAmount = parseFloat(result.paymentAmount);\n        const monthlyAmount = annualAmount / 12;\n        result.paymentAmount = monthlyAmount.toFixed(2);\n        result.paymentFrequency = \"Monthly\" // Convert to monthly for calculations\n        ;\n    }\n    // Calculate Annual Increase % from payment changes\n    // Logic: Only use available LCP payments (Sold=$0, LCP>$0)\n    if (lcpRows.length >= 2) {\n        const firstAmount = lcpRows[0].lcp;\n        let secondAmount = firstAmount;\n        for(let i = 1; i < lcpRows.length; i++){\n            if (Math.abs(lcpRows[i].lcp - firstAmount) > 0.01) {\n                secondAmount = lcpRows[i].lcp;\n                break;\n            }\n        }\n        if (secondAmount !== firstAmount && firstAmount > 0) {\n            const percentageIncrease = (secondAmount - firstAmount) / firstAmount * 100;\n            result.annualIncrease = percentageIncrease.toFixed(2);\n        }\n    }\n    return result;\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./utils/parsers/paymentParser.ts\n"));

/***/ })

});