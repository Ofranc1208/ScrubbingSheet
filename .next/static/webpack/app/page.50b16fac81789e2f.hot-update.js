"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./utils/parsers/clientInfoParser.ts":
/*!*******************************************!*\
  !*** ./utils/parsers/clientInfoParser.ts ***!
  \*******************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parseClientInfo: function() { return /* binding */ parseClientInfo; }\n/* harmony export */ });\n/**\r\n * Parser for client information (CRM ID, Name, SSN, DOB, Gender)\r\n */ function parseClientInfo(rawText) {\n    const result = {};\n    // Extract CRM ID from patterns like \"ID=781618\" or \"(ID=781618)\"\n    const idMatch = rawText.match(/\\(ID=(\\d+)\\)/) || rawText.match(/ID[:\\s=]+(\\d+)/);\n    if (idMatch) {\n        result.crmId = idMatch[1];\n    }\n    // Extract full name from \"Name:\" pattern\n    // Process line by line to handle multiline format correctly\n    const lines = rawText.split(\"\\n\");\n    let nameParts = [];\n    let inNameSection = false;\n    for (const line of lines){\n        const trimmedLine = line.trim();\n        // Start collecting name parts when we find \"Name:\"\n        if (trimmedLine.match(/^Name:/)) {\n            inNameSection = true;\n            continue;\n        }\n        // If we're in name section and line contains alphabetic characters, collect it\n        if (inNameSection && /^[A-Za-z]+$/.test(trimmedLine)) {\n            nameParts.push(trimmedLine);\n        }\n        // Stop collecting when we hit a field label (ends with colon)\n        if (inNameSection && trimmedLine.match(/:$/)) {\n            break;\n        }\n    }\n    // Process collected name parts\n    if (nameParts.length > 0) {\n        result.firstName = nameParts[0];\n        if (nameParts.length >= 2) {\n            result.lastName = nameParts[nameParts.length - 1];\n        }\n    }\n    // Fallback: Try to match \"FirstName LastName\" on single line or combined format\n    if (!result.lastName && result.firstName) {\n        const singleLineMatch = rawText.match(/Name:\\s*([A-Za-z]+)\\s+([A-Za-z]+)/);\n        if (singleLineMatch) {\n            result.firstName = singleLineMatch[1];\n            result.lastName = singleLineMatch[2];\n        }\n    }\n    // Extract Gender from \"Gen:\" or \"Gender:\" pattern\n    // Default to \"Unknown\" if not Male or Female\n    const genderMatch = rawText.match(/Gen(?:der)?:\\s*\\n?\\s*([A-Za-z]+)/i);\n    if (genderMatch) {\n        const gender = genderMatch[1].toLowerCase();\n        if (gender.startsWith(\"m\")) {\n            result.gender = \"Male\";\n        } else if (gender.startsWith(\"f\")) {\n            result.gender = \"Female\";\n        } else {\n            result.gender = \"Unknown\";\n        }\n    } else {\n        // If no gender field found at all, default to Unknown\n        result.gender = \"Unknown\";\n    }\n    // Extract SSN from pattern \"SSN: 454-65-1908\" or \"SSN:      \\t454-65-1908\"\n    const ssnMatch = rawText.match(/SSN:?\\s*\\n?\\s*(\\d{3}[-\\s]?\\d{2}[-\\s]?\\d{4})/);\n    if (ssnMatch) {\n        // Normalize SSN format to XXX-XX-XXXX\n        const ssn = ssnMatch[1].replace(/\\s/g, \"\").replace(/(\\d{3})(\\d{2})(\\d{4})/, \"$1-$2-$3\");\n        result.ssn = ssn;\n    }\n    // Extract DOB from pattern \"DOB: 2/16/1968\"\n    const dobMatch = rawText.match(/DOB:?\\s*\\n?\\s*(\\d{1,2}\\/\\d{1,2}\\/\\d{4})/);\n    if (dobMatch) {\n        result.dob = dobMatch[1];\n    }\n    return result;\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3V0aWxzL3BhcnNlcnMvY2xpZW50SW5mb1BhcnNlci50cyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7O0NBRUMsR0FFTSxTQUFTQSxnQkFBZ0JDLE9BQWU7SUFRN0MsTUFBTUMsU0FBYyxDQUFDO0lBRXJCLGlFQUFpRTtJQUNqRSxNQUFNQyxVQUFVRixRQUFRRyxLQUFLLENBQUMsbUJBQW1CSCxRQUFRRyxLQUFLLENBQUM7SUFDL0QsSUFBSUQsU0FBUztRQUNYRCxPQUFPRyxLQUFLLEdBQUdGLE9BQU8sQ0FBQyxFQUFFO0lBQzNCO0lBRUEseUNBQXlDO0lBQ3pDLDREQUE0RDtJQUM1RCxNQUFNRyxRQUFRTCxRQUFRTSxLQUFLLENBQUM7SUFDNUIsSUFBSUMsWUFBc0IsRUFBRTtJQUM1QixJQUFJQyxnQkFBZ0I7SUFFcEIsS0FBSyxNQUFNQyxRQUFRSixNQUFPO1FBQ3hCLE1BQU1LLGNBQWNELEtBQUtFLElBQUk7UUFFN0IsbURBQW1EO1FBQ25ELElBQUlELFlBQVlQLEtBQUssQ0FBQyxXQUFXO1lBQy9CSyxnQkFBZ0I7WUFDaEI7UUFDRjtRQUVBLCtFQUErRTtRQUMvRSxJQUFJQSxpQkFBaUIsY0FBY0ksSUFBSSxDQUFDRixjQUFjO1lBQ3BESCxVQUFVTSxJQUFJLENBQUNIO1FBQ2pCO1FBRUEsOERBQThEO1FBQzlELElBQUlGLGlCQUFpQkUsWUFBWVAsS0FBSyxDQUFDLE9BQU87WUFDNUM7UUFDRjtJQUNGO0lBRUEsK0JBQStCO0lBQy9CLElBQUlJLFVBQVVPLE1BQU0sR0FBRyxHQUFHO1FBQ3hCYixPQUFPYyxTQUFTLEdBQUdSLFNBQVMsQ0FBQyxFQUFFO1FBQy9CLElBQUlBLFVBQVVPLE1BQU0sSUFBSSxHQUFHO1lBQ3pCYixPQUFPZSxRQUFRLEdBQUdULFNBQVMsQ0FBQ0EsVUFBVU8sTUFBTSxHQUFHLEVBQUU7UUFDbkQ7SUFDRjtJQUVBLGdGQUFnRjtJQUNoRixJQUFJLENBQUNiLE9BQU9lLFFBQVEsSUFBSWYsT0FBT2MsU0FBUyxFQUFFO1FBQ3hDLE1BQU1FLGtCQUFrQmpCLFFBQVFHLEtBQUssQ0FBQztRQUN0QyxJQUFJYyxpQkFBaUI7WUFDbkJoQixPQUFPYyxTQUFTLEdBQUdFLGVBQWUsQ0FBQyxFQUFFO1lBQ3JDaEIsT0FBT2UsUUFBUSxHQUFHQyxlQUFlLENBQUMsRUFBRTtRQUN0QztJQUNGO0lBRUEsa0RBQWtEO0lBQ2xELDZDQUE2QztJQUM3QyxNQUFNQyxjQUFjbEIsUUFBUUcsS0FBSyxDQUFDO0lBQ2xDLElBQUllLGFBQWE7UUFDZixNQUFNQyxTQUFTRCxXQUFXLENBQUMsRUFBRSxDQUFDRSxXQUFXO1FBQ3pDLElBQUlELE9BQU9FLFVBQVUsQ0FBQyxNQUFNO1lBQzFCcEIsT0FBT2tCLE1BQU0sR0FBRztRQUNsQixPQUFPLElBQUlBLE9BQU9FLFVBQVUsQ0FBQyxNQUFNO1lBQ2pDcEIsT0FBT2tCLE1BQU0sR0FBRztRQUNsQixPQUFPO1lBQ0xsQixPQUFPa0IsTUFBTSxHQUFHO1FBQ2xCO0lBQ0YsT0FBTztRQUNMLHNEQUFzRDtRQUN0RGxCLE9BQU9rQixNQUFNLEdBQUc7SUFDbEI7SUFFQSwyRUFBMkU7SUFDM0UsTUFBTUcsV0FBV3RCLFFBQVFHLEtBQUssQ0FBQztJQUMvQixJQUFJbUIsVUFBVTtRQUNaLHNDQUFzQztRQUN0QyxNQUFNQyxNQUFNRCxRQUFRLENBQUMsRUFBRSxDQUFDRSxPQUFPLENBQUMsT0FBTyxJQUFJQSxPQUFPLENBQUMseUJBQXlCO1FBQzVFdkIsT0FBT3NCLEdBQUcsR0FBR0E7SUFDZjtJQUVBLDRDQUE0QztJQUM1QyxNQUFNRSxXQUFXekIsUUFBUUcsS0FBSyxDQUFDO0lBQy9CLElBQUlzQixVQUFVO1FBQ1p4QixPQUFPeUIsR0FBRyxHQUFHRCxRQUFRLENBQUMsRUFBRTtJQUMxQjtJQUVBLE9BQU94QjtBQUNUIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL3V0aWxzL3BhcnNlcnMvY2xpZW50SW5mb1BhcnNlci50cz81NDRkIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBQYXJzZXIgZm9yIGNsaWVudCBpbmZvcm1hdGlvbiAoQ1JNIElELCBOYW1lLCBTU04sIERPQiwgR2VuZGVyKVxyXG4gKi9cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUNsaWVudEluZm8ocmF3VGV4dDogc3RyaW5nKToge1xyXG4gIGNybUlkPzogc3RyaW5nXHJcbiAgZmlyc3ROYW1lPzogc3RyaW5nXHJcbiAgbGFzdE5hbWU/OiBzdHJpbmdcclxuICBzc24/OiBzdHJpbmdcclxuICBkb2I/OiBzdHJpbmdcclxuICBnZW5kZXI/OiBzdHJpbmdcclxufSB7XHJcbiAgY29uc3QgcmVzdWx0OiBhbnkgPSB7fVxyXG5cclxuICAvLyBFeHRyYWN0IENSTSBJRCBmcm9tIHBhdHRlcm5zIGxpa2UgXCJJRD03ODE2MThcIiBvciBcIihJRD03ODE2MTgpXCJcclxuICBjb25zdCBpZE1hdGNoID0gcmF3VGV4dC5tYXRjaCgvXFwoSUQ9KFxcZCspXFwpLykgfHwgcmF3VGV4dC5tYXRjaCgvSURbOlxccz1dKyhcXGQrKS8pXHJcbiAgaWYgKGlkTWF0Y2gpIHtcclxuICAgIHJlc3VsdC5jcm1JZCA9IGlkTWF0Y2hbMV1cclxuICB9XHJcblxyXG4gIC8vIEV4dHJhY3QgZnVsbCBuYW1lIGZyb20gXCJOYW1lOlwiIHBhdHRlcm5cclxuICAvLyBQcm9jZXNzIGxpbmUgYnkgbGluZSB0byBoYW5kbGUgbXVsdGlsaW5lIGZvcm1hdCBjb3JyZWN0bHlcclxuICBjb25zdCBsaW5lcyA9IHJhd1RleHQuc3BsaXQoJ1xcbicpXHJcbiAgbGV0IG5hbWVQYXJ0czogc3RyaW5nW10gPSBbXVxyXG4gIGxldCBpbk5hbWVTZWN0aW9uID0gZmFsc2VcclxuXHJcbiAgZm9yIChjb25zdCBsaW5lIG9mIGxpbmVzKSB7XHJcbiAgICBjb25zdCB0cmltbWVkTGluZSA9IGxpbmUudHJpbSgpXHJcblxyXG4gICAgLy8gU3RhcnQgY29sbGVjdGluZyBuYW1lIHBhcnRzIHdoZW4gd2UgZmluZCBcIk5hbWU6XCJcclxuICAgIGlmICh0cmltbWVkTGluZS5tYXRjaCgvXk5hbWU6LykpIHtcclxuICAgICAgaW5OYW1lU2VjdGlvbiA9IHRydWVcclxuICAgICAgY29udGludWVcclxuICAgIH1cclxuXHJcbiAgICAvLyBJZiB3ZSdyZSBpbiBuYW1lIHNlY3Rpb24gYW5kIGxpbmUgY29udGFpbnMgYWxwaGFiZXRpYyBjaGFyYWN0ZXJzLCBjb2xsZWN0IGl0XHJcbiAgICBpZiAoaW5OYW1lU2VjdGlvbiAmJiAvXltBLVphLXpdKyQvLnRlc3QodHJpbW1lZExpbmUpKSB7XHJcbiAgICAgIG5hbWVQYXJ0cy5wdXNoKHRyaW1tZWRMaW5lKVxyXG4gICAgfVxyXG5cclxuICAgIC8vIFN0b3AgY29sbGVjdGluZyB3aGVuIHdlIGhpdCBhIGZpZWxkIGxhYmVsIChlbmRzIHdpdGggY29sb24pXHJcbiAgICBpZiAoaW5OYW1lU2VjdGlvbiAmJiB0cmltbWVkTGluZS5tYXRjaCgvOiQvKSkge1xyXG4gICAgICBicmVha1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gUHJvY2VzcyBjb2xsZWN0ZWQgbmFtZSBwYXJ0c1xyXG4gIGlmIChuYW1lUGFydHMubGVuZ3RoID4gMCkge1xyXG4gICAgcmVzdWx0LmZpcnN0TmFtZSA9IG5hbWVQYXJ0c1swXVxyXG4gICAgaWYgKG5hbWVQYXJ0cy5sZW5ndGggPj0gMikge1xyXG4gICAgICByZXN1bHQubGFzdE5hbWUgPSBuYW1lUGFydHNbbmFtZVBhcnRzLmxlbmd0aCAtIDFdXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvLyBGYWxsYmFjazogVHJ5IHRvIG1hdGNoIFwiRmlyc3ROYW1lIExhc3ROYW1lXCIgb24gc2luZ2xlIGxpbmUgb3IgY29tYmluZWQgZm9ybWF0XHJcbiAgaWYgKCFyZXN1bHQubGFzdE5hbWUgJiYgcmVzdWx0LmZpcnN0TmFtZSkge1xyXG4gICAgY29uc3Qgc2luZ2xlTGluZU1hdGNoID0gcmF3VGV4dC5tYXRjaCgvTmFtZTpcXHMqKFtBLVphLXpdKylcXHMrKFtBLVphLXpdKykvKVxyXG4gICAgaWYgKHNpbmdsZUxpbmVNYXRjaCkge1xyXG4gICAgICByZXN1bHQuZmlyc3ROYW1lID0gc2luZ2xlTGluZU1hdGNoWzFdXHJcbiAgICAgIHJlc3VsdC5sYXN0TmFtZSA9IHNpbmdsZUxpbmVNYXRjaFsyXVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gRXh0cmFjdCBHZW5kZXIgZnJvbSBcIkdlbjpcIiBvciBcIkdlbmRlcjpcIiBwYXR0ZXJuXHJcbiAgLy8gRGVmYXVsdCB0byBcIlVua25vd25cIiBpZiBub3QgTWFsZSBvciBGZW1hbGVcclxuICBjb25zdCBnZW5kZXJNYXRjaCA9IHJhd1RleHQubWF0Y2goL0dlbig/OmRlcik/OlxccypcXG4/XFxzKihbQS1aYS16XSspL2kpXHJcbiAgaWYgKGdlbmRlck1hdGNoKSB7XHJcbiAgICBjb25zdCBnZW5kZXIgPSBnZW5kZXJNYXRjaFsxXS50b0xvd2VyQ2FzZSgpXHJcbiAgICBpZiAoZ2VuZGVyLnN0YXJ0c1dpdGgoJ20nKSkge1xyXG4gICAgICByZXN1bHQuZ2VuZGVyID0gJ01hbGUnXHJcbiAgICB9IGVsc2UgaWYgKGdlbmRlci5zdGFydHNXaXRoKCdmJykpIHtcclxuICAgICAgcmVzdWx0LmdlbmRlciA9ICdGZW1hbGUnXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICByZXN1bHQuZ2VuZGVyID0gJ1Vua25vd24nXHJcbiAgICB9XHJcbiAgfSBlbHNlIHtcclxuICAgIC8vIElmIG5vIGdlbmRlciBmaWVsZCBmb3VuZCBhdCBhbGwsIGRlZmF1bHQgdG8gVW5rbm93blxyXG4gICAgcmVzdWx0LmdlbmRlciA9ICdVbmtub3duJ1xyXG4gIH1cclxuXHJcbiAgLy8gRXh0cmFjdCBTU04gZnJvbSBwYXR0ZXJuIFwiU1NOOiA0NTQtNjUtMTkwOFwiIG9yIFwiU1NOOiAgICAgIFxcdDQ1NC02NS0xOTA4XCJcclxuICBjb25zdCBzc25NYXRjaCA9IHJhd1RleHQubWF0Y2goL1NTTjo/XFxzKlxcbj9cXHMqKFxcZHszfVstXFxzXT9cXGR7Mn1bLVxcc10/XFxkezR9KS8pXHJcbiAgaWYgKHNzbk1hdGNoKSB7XHJcbiAgICAvLyBOb3JtYWxpemUgU1NOIGZvcm1hdCB0byBYWFgtWFgtWFhYWFxyXG4gICAgY29uc3Qgc3NuID0gc3NuTWF0Y2hbMV0ucmVwbGFjZSgvXFxzL2csICcnKS5yZXBsYWNlKC8oXFxkezN9KShcXGR7Mn0pKFxcZHs0fSkvLCAnJDEtJDItJDMnKVxyXG4gICAgcmVzdWx0LnNzbiA9IHNzblxyXG4gIH1cclxuXHJcbiAgLy8gRXh0cmFjdCBET0IgZnJvbSBwYXR0ZXJuIFwiRE9COiAyLzE2LzE5NjhcIlxyXG4gIGNvbnN0IGRvYk1hdGNoID0gcmF3VGV4dC5tYXRjaCgvRE9COj9cXHMqXFxuP1xccyooXFxkezEsMn1cXC9cXGR7MSwyfVxcL1xcZHs0fSkvKVxyXG4gIGlmIChkb2JNYXRjaCkge1xyXG4gICAgcmVzdWx0LmRvYiA9IGRvYk1hdGNoWzFdXHJcbiAgfVxyXG5cclxuICByZXR1cm4gcmVzdWx0XHJcbn1cclxuXHJcbiJdLCJuYW1lcyI6WyJwYXJzZUNsaWVudEluZm8iLCJyYXdUZXh0IiwicmVzdWx0IiwiaWRNYXRjaCIsIm1hdGNoIiwiY3JtSWQiLCJsaW5lcyIsInNwbGl0IiwibmFtZVBhcnRzIiwiaW5OYW1lU2VjdGlvbiIsImxpbmUiLCJ0cmltbWVkTGluZSIsInRyaW0iLCJ0ZXN0IiwicHVzaCIsImxlbmd0aCIsImZpcnN0TmFtZSIsImxhc3ROYW1lIiwic2luZ2xlTGluZU1hdGNoIiwiZ2VuZGVyTWF0Y2giLCJnZW5kZXIiLCJ0b0xvd2VyQ2FzZSIsInN0YXJ0c1dpdGgiLCJzc25NYXRjaCIsInNzbiIsInJlcGxhY2UiLCJkb2JNYXRjaCIsImRvYiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./utils/parsers/clientInfoParser.ts\n"));

/***/ })

});