"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./utils/parsers/insuranceParser.ts":
/*!******************************************!*\
  !*** ./utils/parsers/insuranceParser.ts ***!
  \******************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parseInsurance: function() { return /* binding */ parseInsurance; }\n/* harmony export */ });\n/**\r\n * Parser for insurance company information\r\n */ function parseInsurance(rawText) {\n    const result = {};\n    // Extract Insurance Company from pattern before payment table\n    // Strategy: Look for \"Insurance Company\" phrase and extract the company name around it\n    // Pattern examples:\n    // - \"Prudential Insurance Company of America\"\n    // - \"MetLife Insurance Company\"\n    // - \"New York Life Insurance Company\"\n    // - \"Allstate Life Insurance Company of New York\"\n    // First, try to find the pattern with \"Insurance Company\" in it\n    const insurancePattern = /([A-Z][A-Za-z\\s&]+Insurance\\s+Company(?:\\s+of\\s+[A-Za-z]+)?)/g;\n    const insuranceMatches = rawText.match(insurancePattern);\n    if (insuranceMatches && insuranceMatches.length > 0) {\n        // Take the first clean match (usually the most complete one)\n        let companyName = insuranceMatches[0].trim();\n        // Clean up common prefixes and suffixes that might be attached\n        companyName = companyName.replace(/^(View\\s+Annuity\\s+|COM\\s+|click\\s+button\\s+to\\s+verify|Get\\s+County\\s+|Has\\s+not\\s+been\\s+verified)/gi, \"\").replace(/\\s+/g, \" \") // Normalize whitespace\n        .trim();\n        // Only accept if it starts with a capital letter and contains \"Insurance Company\"\n        if (/^[A-Z]/.test(companyName) && companyName.includes(\"Insurance Company\")) {\n            result.insuranceCompany = companyName;\n        }\n    }\n    return result;\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3V0aWxzL3BhcnNlcnMvaW5zdXJhbmNlUGFyc2VyLnRzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7Q0FFQyxHQUVNLFNBQVNBLGVBQWVDLE9BQWU7SUFHNUMsTUFBTUMsU0FBYyxDQUFDO0lBRXJCLDhEQUE4RDtJQUM5RCx1RkFBdUY7SUFDdkYsb0JBQW9CO0lBQ3BCLDhDQUE4QztJQUM5QyxnQ0FBZ0M7SUFDaEMsc0NBQXNDO0lBQ3RDLGtEQUFrRDtJQUVsRCxnRUFBZ0U7SUFDaEUsTUFBTUMsbUJBQW1CO0lBQ3pCLE1BQU1DLG1CQUFtQkgsUUFBUUksS0FBSyxDQUFDRjtJQUV2QyxJQUFJQyxvQkFBb0JBLGlCQUFpQkUsTUFBTSxHQUFHLEdBQUc7UUFDbkQsNkRBQTZEO1FBQzdELElBQUlDLGNBQWNILGdCQUFnQixDQUFDLEVBQUUsQ0FBQ0ksSUFBSTtRQUUxQywrREFBK0Q7UUFDL0RELGNBQWNBLFlBQ1hFLE9BQU8sQ0FBQywwR0FBMEcsSUFDbEhBLE9BQU8sQ0FBQyxRQUFRLEtBQUssdUJBQXVCO1NBQzVDRCxJQUFJO1FBRVAsa0ZBQWtGO1FBQ2xGLElBQUksU0FBU0UsSUFBSSxDQUFDSCxnQkFBZ0JBLFlBQVlJLFFBQVEsQ0FBQyxzQkFBc0I7WUFDM0VULE9BQU9VLGdCQUFnQixHQUFHTDtRQUM1QjtJQUNGO0lBRUEsT0FBT0w7QUFDVCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi91dGlscy9wYXJzZXJzL2luc3VyYW5jZVBhcnNlci50cz81Zjk2Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBQYXJzZXIgZm9yIGluc3VyYW5jZSBjb21wYW55IGluZm9ybWF0aW9uXHJcbiAqL1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlSW5zdXJhbmNlKHJhd1RleHQ6IHN0cmluZyk6IHtcclxuICBpbnN1cmFuY2VDb21wYW55Pzogc3RyaW5nXHJcbn0ge1xyXG4gIGNvbnN0IHJlc3VsdDogYW55ID0ge31cclxuXHJcbiAgLy8gRXh0cmFjdCBJbnN1cmFuY2UgQ29tcGFueSBmcm9tIHBhdHRlcm4gYmVmb3JlIHBheW1lbnQgdGFibGVcclxuICAvLyBTdHJhdGVneTogTG9vayBmb3IgXCJJbnN1cmFuY2UgQ29tcGFueVwiIHBocmFzZSBhbmQgZXh0cmFjdCB0aGUgY29tcGFueSBuYW1lIGFyb3VuZCBpdFxyXG4gIC8vIFBhdHRlcm4gZXhhbXBsZXM6XHJcbiAgLy8gLSBcIlBydWRlbnRpYWwgSW5zdXJhbmNlIENvbXBhbnkgb2YgQW1lcmljYVwiXHJcbiAgLy8gLSBcIk1ldExpZmUgSW5zdXJhbmNlIENvbXBhbnlcIlxyXG4gIC8vIC0gXCJOZXcgWW9yayBMaWZlIEluc3VyYW5jZSBDb21wYW55XCJcclxuICAvLyAtIFwiQWxsc3RhdGUgTGlmZSBJbnN1cmFuY2UgQ29tcGFueSBvZiBOZXcgWW9ya1wiXHJcbiAgXHJcbiAgLy8gRmlyc3QsIHRyeSB0byBmaW5kIHRoZSBwYXR0ZXJuIHdpdGggXCJJbnN1cmFuY2UgQ29tcGFueVwiIGluIGl0XHJcbiAgY29uc3QgaW5zdXJhbmNlUGF0dGVybiA9IC8oW0EtWl1bQS1aYS16XFxzJl0rSW5zdXJhbmNlXFxzK0NvbXBhbnkoPzpcXHMrb2ZcXHMrW0EtWmEtel0rKT8pL2dcclxuICBjb25zdCBpbnN1cmFuY2VNYXRjaGVzID0gcmF3VGV4dC5tYXRjaChpbnN1cmFuY2VQYXR0ZXJuKVxyXG4gIFxyXG4gIGlmIChpbnN1cmFuY2VNYXRjaGVzICYmIGluc3VyYW5jZU1hdGNoZXMubGVuZ3RoID4gMCkge1xyXG4gICAgLy8gVGFrZSB0aGUgZmlyc3QgY2xlYW4gbWF0Y2ggKHVzdWFsbHkgdGhlIG1vc3QgY29tcGxldGUgb25lKVxyXG4gICAgbGV0IGNvbXBhbnlOYW1lID0gaW5zdXJhbmNlTWF0Y2hlc1swXS50cmltKClcclxuICAgIFxyXG4gICAgLy8gQ2xlYW4gdXAgY29tbW9uIHByZWZpeGVzIGFuZCBzdWZmaXhlcyB0aGF0IG1pZ2h0IGJlIGF0dGFjaGVkXHJcbiAgICBjb21wYW55TmFtZSA9IGNvbXBhbnlOYW1lXHJcbiAgICAgIC5yZXBsYWNlKC9eKFZpZXdcXHMrQW5udWl0eVxccyt8Q09NXFxzK3xjbGlja1xccytidXR0b25cXHMrdG9cXHMrdmVyaWZ5fEdldFxccytDb3VudHlcXHMrfEhhc1xccytub3RcXHMrYmVlblxccyt2ZXJpZmllZCkvZ2ksICcnKVxyXG4gICAgICAucmVwbGFjZSgvXFxzKy9nLCAnICcpIC8vIE5vcm1hbGl6ZSB3aGl0ZXNwYWNlXHJcbiAgICAgIC50cmltKClcclxuICAgIFxyXG4gICAgLy8gT25seSBhY2NlcHQgaWYgaXQgc3RhcnRzIHdpdGggYSBjYXBpdGFsIGxldHRlciBhbmQgY29udGFpbnMgXCJJbnN1cmFuY2UgQ29tcGFueVwiXHJcbiAgICBpZiAoL15bQS1aXS8udGVzdChjb21wYW55TmFtZSkgJiYgY29tcGFueU5hbWUuaW5jbHVkZXMoJ0luc3VyYW5jZSBDb21wYW55JykpIHtcclxuICAgICAgcmVzdWx0Lmluc3VyYW5jZUNvbXBhbnkgPSBjb21wYW55TmFtZVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHJlc3VsdFxyXG59XHJcblxyXG4iXSwibmFtZXMiOlsicGFyc2VJbnN1cmFuY2UiLCJyYXdUZXh0IiwicmVzdWx0IiwiaW5zdXJhbmNlUGF0dGVybiIsImluc3VyYW5jZU1hdGNoZXMiLCJtYXRjaCIsImxlbmd0aCIsImNvbXBhbnlOYW1lIiwidHJpbSIsInJlcGxhY2UiLCJ0ZXN0IiwiaW5jbHVkZXMiLCJpbnN1cmFuY2VDb21wYW55Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./utils/parsers/insuranceParser.ts\n"));

/***/ })

});