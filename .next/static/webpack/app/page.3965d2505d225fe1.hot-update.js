"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./app/services/dataProcessingService.ts":
/*!***********************************************!*\
  !*** ./app/services/dataProcessingService.ts ***!
  \***********************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DataProcessingService: function() { return /* binding */ DataProcessingService; }\n/* harmony export */ });\n/* harmony import */ var _utils_accessDataParser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/accessDataParser */ \"(app-pages-browser)/./utils/accessDataParser.ts\");\n/* harmony import */ var _config_fieldMappings__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../config/fieldMappings */ \"(app-pages-browser)/./app/config/fieldMappings.ts\");\n\n\n/**\r\n * Service for handling data parsing and processing logic\r\n */ class DataProcessingService {\n    /**\r\n   * Parse raw data and return formatted preview data\r\n   */ static parseRawData(rawData) {\n        if (!rawData.trim()) return null;\n        // Try intelligent Access database parsing first\n        const extractedData = (0,_utils_accessDataParser__WEBPACK_IMPORTED_MODULE_0__.parseAccessData)(rawData);\n        if (extractedData) {\n            // Format extracted data for preview\n            const previewData = (0,_utils_accessDataParser__WEBPACK_IMPORTED_MODULE_0__.formatExtractedDataForPreview)(extractedData);\n            return {\n                headers: [\n                    \"Field\",\n                    \"Value\"\n                ],\n                rows: previewData\n            };\n        }\n        // Fallback to traditional tab/comma-delimited parsing\n        return this.parseDelimitedData(rawData);\n    }\n    /**\r\n   * Get the structured data from raw text (used for processing)\r\n   */ static getStructuredData(rawData) {\n        if (!rawData.trim()) return null;\n        // Try intelligent Access database parsing first\n        return (0,_utils_accessDataParser__WEBPACK_IMPORTED_MODULE_0__.parseAccessData)(rawData);\n    }\n    /**\r\n   * Parse tab/comma delimited data as fallback\r\n   */ static parseDelimitedData(rawData) {\n        const lines = rawData.trim().split(\"\\n\");\n        if (lines.length === 0) {\n            return {\n                headers: [],\n                rows: []\n            };\n        }\n        // Parse first line as headers\n        const firstLine = lines[0];\n        let columns = firstLine.split(\"\t\");\n        if (columns.length === 1) {\n            columns = firstLine.split(\",\");\n        }\n        const headers = columns.map((col)=>col.trim());\n        // Parse data rows\n        const rows = [];\n        for(let i = 1; i < lines.length; i++){\n            const line = lines[i];\n            let rowColumns = line.split(\"\t\");\n            if (rowColumns.length === 1 && !line.includes(\"\t\")) {\n                rowColumns = line.split(\",\");\n            }\n            if (rowColumns.length > 0) {\n                rows.push(rowColumns.map((col)=>col.trim()));\n            }\n        }\n        return {\n            headers,\n            rows\n        };\n    }\n    /**\r\n   * Process parsed data into a PricingRecord\r\n   */ static processData(parsedData) {\n        if (parsedData.rows.length === 0) {\n            return {};\n        }\n        // Check if this is Access database format (Field/Value pairs)\n        if (parsedData.headers[0] === \"Field\" && parsedData.headers[1] === \"Value\") {\n            return this.processAccessFormatData(parsedData);\n        }\n        // Traditional tab/comma-delimited format\n        return this.processDelimitedFormatData(parsedData);\n    }\n    /**\r\n   * Process Access database format data (Field/Value pairs)\r\n   */ static processAccessFormatData(parsedData) {\n        const newRecord = {};\n        parsedData.rows.forEach((param)=>{\n            let [field, value] = param;\n            const fieldLower = field.toLowerCase();\n            if (fieldLower.includes(\"crm\")) newRecord.crmId = value;\n            else if (fieldLower.includes(\"ssn\")) newRecord.ssn = value;\n            else if (fieldLower.includes(\"dob\")) newRecord.dob = value;\n            else if (fieldLower.includes(\"age\")) newRecord.age = value;\n            else if (fieldLower.includes(\"gender\")) newRecord.gender = value;\n            else if (fieldLower.includes(\"phone 1\") || fieldLower.includes(\"phone1\") || fieldLower === \"phone\" && !newRecord.phone1) newRecord.phone1 = value;\n            else if (fieldLower.includes(\"phone 2\") || fieldLower.includes(\"phone2\")) newRecord.phone2 = value;\n            else if (fieldLower.includes(\"phone 3\") || fieldLower.includes(\"phone3\")) newRecord.phone3 = value;\n            else if (fieldLower.includes(\"email\")) newRecord.email = value;\n            else if (fieldLower.includes(\"address\") && !fieldLower.includes(\"city\") && !fieldLower.includes(\"state\")) {\n                newRecord.streetAddress1 = value;\n                newRecord.fullAddress = value;\n            } else if (fieldLower.includes(\"city\")) newRecord.city = value;\n            else if (fieldLower.includes(\"state\")) newRecord.state = value;\n            else if (fieldLower.includes(\"zip\")) newRecord.zipCode = value;\n            else if (fieldLower.includes(\"insurance\")) newRecord.insuranceCompany = value;\n            else if (fieldLower.includes(\"payment type\")) newRecord.typeOfPayment = value;\n            else if (fieldLower.includes(\"payment amount\") || fieldLower === \"amount\") newRecord.paymentAmount = value;\n            else if (fieldLower.includes(\"frequency\")) newRecord.paymentFrequency = value;\n            else if (fieldLower.includes(\"annual increase\")) newRecord.annualIncrease = value;\n        });\n        return newRecord;\n    }\n    /**\r\n   * Process delimited format data using field mappings\r\n   */ static processDelimitedFormatData(parsedData) {\n        const firstRow = parsedData.rows[0];\n        const newRecord = {};\n        // Map each field based on header matching\n        Object.keys(_config_fieldMappings__WEBPACK_IMPORTED_MODULE_1__.fieldMappings).forEach((fieldKey)=>{\n            const possibleHeaders = _config_fieldMappings__WEBPACK_IMPORTED_MODULE_1__.fieldMappings[fieldKey];\n            const columnIndex = parsedData.headers.findIndex((header)=>possibleHeaders.some((ph)=>header.toLowerCase().includes(ph.toLowerCase())));\n            if (columnIndex !== -1 && firstRow[columnIndex]) {\n                newRecord[fieldKey] = firstRow[columnIndex].trim();\n            }\n        });\n        // Ensure age has a default value if not provided\n        if (!newRecord.age) {\n            newRecord.age = \"50\" // Default to 50 for calculations\n            ;\n        }\n        // Ensure SSN and DOB have appropriate defaults\n        if (!newRecord.ssn) {\n            newRecord.ssn = \"___-__-____\" // Masked format for UI\n            ;\n        }\n        if (!newRecord.dob) {\n            newRecord.dob = \"\" // Empty for UI (will show as missing)\n            ;\n        }\n        return newRecord;\n    }\n    /**\r\n   * Validate if data processing was successful\r\n   */ static validateProcessingResult(record) {\n        return !!(record.crmId || record.firstName || record.lastName);\n    }\n}\n\n\n;\r\n    // Wrapped in an IIFE to avoid polluting the global scope\r\n    ;\r\n    (function () {\r\n        var _a, _b;\r\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\r\n        // to extract CSS. For backwards compatibility, we need to check we're in a\r\n        // browser context before continuing.\r\n        if (typeof self !== 'undefined' &&\r\n            // AMP / No-JS mode does not inject these helpers:\r\n            '$RefreshHelpers$' in self) {\r\n            // @ts-ignore __webpack_module__ is global\r\n            var currentExports = module.exports;\r\n            // @ts-ignore __webpack_module__ is global\r\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\r\n            // This cannot happen in MainTemplate because the exports mismatch between\r\n            // templating and execution.\r\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\r\n            // A module can be accepted automatically based on its exports, e.g. when\r\n            // it is a Refresh Boundary.\r\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\r\n                // Save the previous exports signature on update so we can compare the boundary\r\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\r\n                module.hot.dispose(function (data) {\r\n                    data.prevSignature =\r\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\r\n                });\r\n                // Unconditionally accept an update to this module, we'll check if it's\r\n                // still a Refresh Boundary later.\r\n                // @ts-ignore importMeta is replaced in the loader\r\n                module.hot.accept();\r\n                // This field is set when the previous version of this module was a\r\n                // Refresh Boundary, letting us know we need to check for invalidation or\r\n                // enqueue an update.\r\n                if (prevSignature !== null) {\r\n                    // A boundary can become ineligible if its exports are incompatible\r\n                    // with the previous exports.\r\n                    //\r\n                    // For example, if you add/remove/change exports, we'll want to\r\n                    // re-execute the importing modules, and force those components to\r\n                    // re-render. Similarly, if you convert a class component to a\r\n                    // function, we want to invalidate the boundary.\r\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\r\n                        module.hot.invalidate();\r\n                    }\r\n                    else {\r\n                        self.$RefreshHelpers$.scheduleUpdate();\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                // Since we just executed the code for the module, it's possible that the\r\n                // new exports made it ineligible for being a boundary.\r\n                // We only care about the case when we were _previously_ a boundary,\r\n                // because we already accepted this update (accidental side effect).\r\n                var isNoLongerABoundary = prevSignature !== null;\r\n                if (isNoLongerABoundary) {\r\n                    module.hot.invalidate();\r\n                }\r\n            }\r\n        }\r\n    })();\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/services/dataProcessingService.ts\n"));

/***/ })

});