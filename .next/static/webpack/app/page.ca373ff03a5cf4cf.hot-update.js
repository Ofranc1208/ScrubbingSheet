"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./utils/parsers/insuranceParser.ts":
/*!******************************************!*\
  !*** ./utils/parsers/insuranceParser.ts ***!
  \******************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parseInsurance: function() { return /* binding */ parseInsurance; }\n/* harmony export */ });\n/**\r\n * Parser for insurance company information\r\n */ function parseInsurance(rawText) {\n    const result = {};\n    // Extract Insurance Company from pattern before payment table\n    // Strategy: Look for \"Insurance Company\" phrase and extract the company name around it\n    // Pattern examples:\n    // - \"Prudential Insurance Company of America\"\n    // - \"MetLife Insurance Company\"\n    // - \"New York Life Insurance Company\"\n    // - \"Allstate Life Insurance Company of New York\"\n    // First, try to find \"View Annuity\" pattern followed by company name\n    const viewAnnuityMatch = rawText.match(/View\\s+Annuity\\s+([A-Z][A-Za-z\\s&]+?)(?:\\s+\\$[\\d,]+\\.?\\d*)?$/);\n    if (viewAnnuityMatch) {\n        let companyName = viewAnnuityMatch[1].trim();\n        // Clean up common prefixes and suffixes\n        companyName = companyName.replace(/^(View\\s+Annuity\\s+|COM\\s+|click\\s+button\\s+to\\s+verify|Get\\s+County\\s+|Has\\s+not\\s+been\\s+verified)/gi, \"\").replace(/\\s+/g, \" \") // Normalize whitespace\n        .trim();\n        // Accept if it starts with a capital letter and is a reasonable company name\n        if (/^[A-Z]/.test(companyName) && companyName.length > 2) {\n            result.insuranceCompany = companyName;\n        }\n    }\n    // Fallback: Look for \"Insurance Company\" patterns\n    if (!result.insuranceCompany) {\n        const insurancePattern = /([A-Z][A-Za-z\\s&]+Insurance\\s+Company(?:\\s+of\\s+[A-Za-z]+)?)/g;\n        const insuranceMatches = rawText.match(insurancePattern);\n        if (insuranceMatches && insuranceMatches.length > 0) {\n            // Take the first clean match (usually the most complete one)\n            let companyName = insuranceMatches[0].trim();\n            // Clean up common prefixes and suffixes that might be attached\n            companyName = companyName.replace(/^(View\\s+Annuity\\s+|COM\\s+|click\\s+button\\s+to\\s+verify|Get\\s+County\\s+|Has\\s+not\\s+been\\s+verified)/gi, \"\").replace(/\\s+/g, \" \") // Normalize whitespace\n            .trim();\n            // Only accept if it starts with a capital letter and contains \"Insurance Company\"\n            if (/^[A-Z]/.test(companyName) && companyName.includes(\"Insurance Company\")) {\n                result.insuranceCompany = companyName;\n            }\n        }\n    }\n    return result;\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3V0aWxzL3BhcnNlcnMvaW5zdXJhbmNlUGFyc2VyLnRzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7Q0FFQyxHQUVNLFNBQVNBLGVBQWVDLE9BQWU7SUFHNUMsTUFBTUMsU0FBYyxDQUFDO0lBRXJCLDhEQUE4RDtJQUM5RCx1RkFBdUY7SUFDdkYsb0JBQW9CO0lBQ3BCLDhDQUE4QztJQUM5QyxnQ0FBZ0M7SUFDaEMsc0NBQXNDO0lBQ3RDLGtEQUFrRDtJQUVsRCxxRUFBcUU7SUFDckUsTUFBTUMsbUJBQW1CRixRQUFRRyxLQUFLLENBQUM7SUFDdkMsSUFBSUQsa0JBQWtCO1FBQ3BCLElBQUlFLGNBQWNGLGdCQUFnQixDQUFDLEVBQUUsQ0FBQ0csSUFBSTtRQUUxQyx3Q0FBd0M7UUFDeENELGNBQWNBLFlBQ1hFLE9BQU8sQ0FBQywwR0FBMEcsSUFDbEhBLE9BQU8sQ0FBQyxRQUFRLEtBQUssdUJBQXVCO1NBQzVDRCxJQUFJO1FBRVAsNkVBQTZFO1FBQzdFLElBQUksU0FBU0UsSUFBSSxDQUFDSCxnQkFBZ0JBLFlBQVlJLE1BQU0sR0FBRyxHQUFHO1lBQ3hEUCxPQUFPUSxnQkFBZ0IsR0FBR0w7UUFDNUI7SUFDRjtJQUVBLGtEQUFrRDtJQUNsRCxJQUFJLENBQUNILE9BQU9RLGdCQUFnQixFQUFFO1FBQzVCLE1BQU1DLG1CQUFtQjtRQUN6QixNQUFNQyxtQkFBbUJYLFFBQVFHLEtBQUssQ0FBQ087UUFFdkMsSUFBSUMsb0JBQW9CQSxpQkFBaUJILE1BQU0sR0FBRyxHQUFHO1lBQ25ELDZEQUE2RDtZQUM3RCxJQUFJSixjQUFjTyxnQkFBZ0IsQ0FBQyxFQUFFLENBQUNOLElBQUk7WUFFMUMsK0RBQStEO1lBQy9ERCxjQUFjQSxZQUNYRSxPQUFPLENBQUMsMEdBQTBHLElBQ2xIQSxPQUFPLENBQUMsUUFBUSxLQUFLLHVCQUF1QjthQUM1Q0QsSUFBSTtZQUVQLGtGQUFrRjtZQUNsRixJQUFJLFNBQVNFLElBQUksQ0FBQ0gsZ0JBQWdCQSxZQUFZUSxRQUFRLENBQUMsc0JBQXNCO2dCQUMzRVgsT0FBT1EsZ0JBQWdCLEdBQUdMO1lBQzVCO1FBQ0Y7SUFDRjtJQUVBLE9BQU9IO0FBQ1QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vdXRpbHMvcGFyc2Vycy9pbnN1cmFuY2VQYXJzZXIudHM/NWY5NiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogUGFyc2VyIGZvciBpbnN1cmFuY2UgY29tcGFueSBpbmZvcm1hdGlvblxyXG4gKi9cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUluc3VyYW5jZShyYXdUZXh0OiBzdHJpbmcpOiB7XHJcbiAgaW5zdXJhbmNlQ29tcGFueT86IHN0cmluZ1xyXG59IHtcclxuICBjb25zdCByZXN1bHQ6IGFueSA9IHt9XHJcblxyXG4gIC8vIEV4dHJhY3QgSW5zdXJhbmNlIENvbXBhbnkgZnJvbSBwYXR0ZXJuIGJlZm9yZSBwYXltZW50IHRhYmxlXHJcbiAgLy8gU3RyYXRlZ3k6IExvb2sgZm9yIFwiSW5zdXJhbmNlIENvbXBhbnlcIiBwaHJhc2UgYW5kIGV4dHJhY3QgdGhlIGNvbXBhbnkgbmFtZSBhcm91bmQgaXRcclxuICAvLyBQYXR0ZXJuIGV4YW1wbGVzOlxyXG4gIC8vIC0gXCJQcnVkZW50aWFsIEluc3VyYW5jZSBDb21wYW55IG9mIEFtZXJpY2FcIlxyXG4gIC8vIC0gXCJNZXRMaWZlIEluc3VyYW5jZSBDb21wYW55XCJcclxuICAvLyAtIFwiTmV3IFlvcmsgTGlmZSBJbnN1cmFuY2UgQ29tcGFueVwiXHJcbiAgLy8gLSBcIkFsbHN0YXRlIExpZmUgSW5zdXJhbmNlIENvbXBhbnkgb2YgTmV3IFlvcmtcIlxyXG4gIFxyXG4gIC8vIEZpcnN0LCB0cnkgdG8gZmluZCBcIlZpZXcgQW5udWl0eVwiIHBhdHRlcm4gZm9sbG93ZWQgYnkgY29tcGFueSBuYW1lXHJcbiAgY29uc3Qgdmlld0FubnVpdHlNYXRjaCA9IHJhd1RleHQubWF0Y2goL1ZpZXdcXHMrQW5udWl0eVxccysoW0EtWl1bQS1aYS16XFxzJl0rPykoPzpcXHMrXFwkW1xcZCxdK1xcLj9cXGQqKT8kLylcclxuICBpZiAodmlld0FubnVpdHlNYXRjaCkge1xyXG4gICAgbGV0IGNvbXBhbnlOYW1lID0gdmlld0FubnVpdHlNYXRjaFsxXS50cmltKClcclxuXHJcbiAgICAvLyBDbGVhbiB1cCBjb21tb24gcHJlZml4ZXMgYW5kIHN1ZmZpeGVzXHJcbiAgICBjb21wYW55TmFtZSA9IGNvbXBhbnlOYW1lXHJcbiAgICAgIC5yZXBsYWNlKC9eKFZpZXdcXHMrQW5udWl0eVxccyt8Q09NXFxzK3xjbGlja1xccytidXR0b25cXHMrdG9cXHMrdmVyaWZ5fEdldFxccytDb3VudHlcXHMrfEhhc1xccytub3RcXHMrYmVlblxccyt2ZXJpZmllZCkvZ2ksICcnKVxyXG4gICAgICAucmVwbGFjZSgvXFxzKy9nLCAnICcpIC8vIE5vcm1hbGl6ZSB3aGl0ZXNwYWNlXHJcbiAgICAgIC50cmltKClcclxuXHJcbiAgICAvLyBBY2NlcHQgaWYgaXQgc3RhcnRzIHdpdGggYSBjYXBpdGFsIGxldHRlciBhbmQgaXMgYSByZWFzb25hYmxlIGNvbXBhbnkgbmFtZVxyXG4gICAgaWYgKC9eW0EtWl0vLnRlc3QoY29tcGFueU5hbWUpICYmIGNvbXBhbnlOYW1lLmxlbmd0aCA+IDIpIHtcclxuICAgICAgcmVzdWx0Lmluc3VyYW5jZUNvbXBhbnkgPSBjb21wYW55TmFtZVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gRmFsbGJhY2s6IExvb2sgZm9yIFwiSW5zdXJhbmNlIENvbXBhbnlcIiBwYXR0ZXJuc1xyXG4gIGlmICghcmVzdWx0Lmluc3VyYW5jZUNvbXBhbnkpIHtcclxuICAgIGNvbnN0IGluc3VyYW5jZVBhdHRlcm4gPSAvKFtBLVpdW0EtWmEtelxccyZdK0luc3VyYW5jZVxccytDb21wYW55KD86XFxzK29mXFxzK1tBLVphLXpdKyk/KS9nXHJcbiAgICBjb25zdCBpbnN1cmFuY2VNYXRjaGVzID0gcmF3VGV4dC5tYXRjaChpbnN1cmFuY2VQYXR0ZXJuKVxyXG5cclxuICAgIGlmIChpbnN1cmFuY2VNYXRjaGVzICYmIGluc3VyYW5jZU1hdGNoZXMubGVuZ3RoID4gMCkge1xyXG4gICAgICAvLyBUYWtlIHRoZSBmaXJzdCBjbGVhbiBtYXRjaCAodXN1YWxseSB0aGUgbW9zdCBjb21wbGV0ZSBvbmUpXHJcbiAgICAgIGxldCBjb21wYW55TmFtZSA9IGluc3VyYW5jZU1hdGNoZXNbMF0udHJpbSgpXHJcblxyXG4gICAgICAvLyBDbGVhbiB1cCBjb21tb24gcHJlZml4ZXMgYW5kIHN1ZmZpeGVzIHRoYXQgbWlnaHQgYmUgYXR0YWNoZWRcclxuICAgICAgY29tcGFueU5hbWUgPSBjb21wYW55TmFtZVxyXG4gICAgICAgIC5yZXBsYWNlKC9eKFZpZXdcXHMrQW5udWl0eVxccyt8Q09NXFxzK3xjbGlja1xccytidXR0b25cXHMrdG9cXHMrdmVyaWZ5fEdldFxccytDb3VudHlcXHMrfEhhc1xccytub3RcXHMrYmVlblxccyt2ZXJpZmllZCkvZ2ksICcnKVxyXG4gICAgICAgIC5yZXBsYWNlKC9cXHMrL2csICcgJykgLy8gTm9ybWFsaXplIHdoaXRlc3BhY2VcclxuICAgICAgICAudHJpbSgpXHJcblxyXG4gICAgICAvLyBPbmx5IGFjY2VwdCBpZiBpdCBzdGFydHMgd2l0aCBhIGNhcGl0YWwgbGV0dGVyIGFuZCBjb250YWlucyBcIkluc3VyYW5jZSBDb21wYW55XCJcclxuICAgICAgaWYgKC9eW0EtWl0vLnRlc3QoY29tcGFueU5hbWUpICYmIGNvbXBhbnlOYW1lLmluY2x1ZGVzKCdJbnN1cmFuY2UgQ29tcGFueScpKSB7XHJcbiAgICAgICAgcmVzdWx0Lmluc3VyYW5jZUNvbXBhbnkgPSBjb21wYW55TmFtZVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZXR1cm4gcmVzdWx0XHJcbn1cclxuXHJcbiJdLCJuYW1lcyI6WyJwYXJzZUluc3VyYW5jZSIsInJhd1RleHQiLCJyZXN1bHQiLCJ2aWV3QW5udWl0eU1hdGNoIiwibWF0Y2giLCJjb21wYW55TmFtZSIsInRyaW0iLCJyZXBsYWNlIiwidGVzdCIsImxlbmd0aCIsImluc3VyYW5jZUNvbXBhbnkiLCJpbnN1cmFuY2VQYXR0ZXJuIiwiaW5zdXJhbmNlTWF0Y2hlcyIsImluY2x1ZGVzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./utils/parsers/insuranceParser.ts\n"));

/***/ })

});