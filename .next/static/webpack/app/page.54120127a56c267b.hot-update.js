"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./app/page.tsx":
/*!**********************!*\
  !*** ./app/page.tsx ***!
  \**********************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ DataScrubber; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var xlsx__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! xlsx */ \"(app-pages-browser)/./node_modules/xlsx/xlsx.mjs\");\n/* harmony import */ var _components__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../components */ \"(app-pages-browser)/./components/index.ts\");\n/* harmony import */ var _utils_accessDataParser__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/accessDataParser */ \"(app-pages-browser)/./utils/accessDataParser.ts\");\n/* harmony import */ var _utils_localStorage__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/localStorage */ \"(app-pages-browser)/./utils/localStorage.ts\");\n/* __next_internal_client_entry_do_not_use__ default auto */ \nvar _s = $RefreshSig$();\n\n\n\n\n\nfunction DataScrubber() {\n    _s();\n    const [uploadedFile, setUploadedFile] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [rawData, setRawData] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(\"\");\n    const [parsedData, setParsedData] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n        headers: [],\n        rows: []\n    });\n    const [currentRecord, setCurrentRecord] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({});\n    const [completedRecords, setCompletedRecords] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [isDataLoaded, setIsDataLoaded] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    // Load data from localStorage on component mount\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const savedData = (0,_utils_localStorage__WEBPACK_IMPORTED_MODULE_4__.loadFromLocalStorage)();\n        if (savedData) {\n            setUploadedFile(savedData.uploadedFile || null);\n            setRawData(savedData.rawData || \"\");\n            setParsedData(savedData.parsedData || {\n                headers: [],\n                rows: []\n            });\n            setCurrentRecord(savedData.currentRecord || {});\n            setCompletedRecords(savedData.completedRecords || []);\n        }\n        // Always set isDataLoaded to true after mount, even if no saved data\n        setIsDataLoaded(true);\n    }, []);\n    // Save data to localStorage whenever state changes (debounced)\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (isDataLoaded) {\n            const timeoutId = setTimeout(()=>{\n                (0,_utils_localStorage__WEBPACK_IMPORTED_MODULE_4__.saveToLocalStorage)({\n                    uploadedFile,\n                    rawData,\n                    parsedData,\n                    currentRecord,\n                    completedRecords\n                });\n            }, 1000) // Save after 1 second of inactivity\n            ;\n            return ()=>clearTimeout(timeoutId);\n        }\n    }, [\n        uploadedFile,\n        rawData,\n        parsedData,\n        currentRecord,\n        completedRecords,\n        isDataLoaded\n    ]);\n    // Hard reset function\n    const handleHardReset = ()=>{\n        if (window.confirm(\"Are you sure you want to reset all data? This cannot be undone.\")) {\n            // Clear all state\n            setUploadedFile(null);\n            setRawData(\"\");\n            setParsedData({\n                headers: [],\n                rows: []\n            });\n            setCurrentRecord({});\n            setCompletedRecords([]);\n            // Clear localStorage\n            (0,_utils_localStorage__WEBPACK_IMPORTED_MODULE_4__.clearLocalStorage)();\n            // Show confirmation\n            alert(\"All data has been reset. Page will reload.\");\n            window.location.reload();\n        }\n    };\n    // Field mapping configuration for auto-population\n    const fieldMappings = {\n        crmId: [\n            \"crm\",\n            \"id\",\n            \"client id\",\n            \"customer id\",\n            \"crm id\"\n        ],\n        firstName: [\n            \"first name\",\n            \"firstname\",\n            \"fname\",\n            \"given name\",\n            \"first\"\n        ],\n        lastName: [\n            \"last name\",\n            \"lastname\",\n            \"lname\",\n            \"surname\",\n            \"family name\",\n            \"last\"\n        ],\n        ssn: [\n            \"ssn\",\n            \"social security\",\n            \"social security number\",\n            \"ss#\"\n        ],\n        dob: [\n            \"dob\",\n            \"date of birth\",\n            \"birth date\",\n            \"birthdate\",\n            \"birthday\"\n        ],\n        age: [\n            \"age\"\n        ],\n        gender: [\n            \"gender\",\n            \"sex\",\n            \"gen\"\n        ],\n        phone1: [\n            \"phone 1\",\n            \"phone1\",\n            \"main phone\",\n            \"primary phone\",\n            \"phone\"\n        ],\n        phone2: [\n            \"phone 2\",\n            \"phone2\",\n            \"secondary phone\",\n            \"alternate phone\"\n        ],\n        phone3: [\n            \"phone 3\",\n            \"phone3\",\n            \"third phone\"\n        ],\n        email: [\n            \"email\",\n            \"e-mail\",\n            \"email address\"\n        ],\n        insuranceCompany: [\n            \"insurance\",\n            \"insurance company\",\n            \"insurer\",\n            \"carrier\"\n        ],\n        typeOfPayment: [\n            \"payment type\",\n            \"type of payment\",\n            \"payment method\",\n            \"type\"\n        ],\n        paymentFrequency: [\n            \"frequency\",\n            \"payment frequency\",\n            \"pay frequency\"\n        ],\n        paymentStartDate: [\n            \"start date\",\n            \"begin date\",\n            \"effective date\"\n        ],\n        paymentEndDate: [\n            \"end date\",\n            \"expiration date\",\n            \"maturity date\"\n        ],\n        paymentAmount: [\n            \"amount\",\n            \"payment amount\",\n            \"payment\",\n            \"premium\"\n        ],\n        annualIncrease: [\n            \"annual increase\",\n            \"yearly increase\",\n            \"increase\"\n        ],\n        fullAddress: [\n            \"address\",\n            \"full address\",\n            \"complete address\",\n            \"home address\"\n        ],\n        streetAddress1: [\n            \"street\",\n            \"street address\",\n            \"address line 1\",\n            \"street 1\",\n            \"street address 1\"\n        ],\n        streetAddress2: [\n            \"street 2\",\n            \"address line 2\",\n            \"apt\",\n            \"suite\",\n            \"unit\"\n        ],\n        city: [\n            \"city\",\n            \"town\"\n        ],\n        state: [\n            \"state\",\n            \"province\"\n        ],\n        zipCode: [\n            \"zip\",\n            \"zip code\",\n            \"postal code\",\n            \"postal\",\n            \"zipcode\"\n        ]\n    };\n    const handleFileUpload = (event)=>{\n        var _event_target_files;\n        const file = (_event_target_files = event.target.files) === null || _event_target_files === void 0 ? void 0 : _event_target_files[0];\n        if (file) {\n            setUploadedFile(file);\n        // TODO: Parse uploaded file\n        }\n    };\n    const parseRawData = ()=>{\n        if (!rawData.trim()) return;\n        // Try intelligent Access database parsing first\n        const extractedData = (0,_utils_accessDataParser__WEBPACK_IMPORTED_MODULE_3__.parseAccessData)(rawData);\n        if (extractedData) {\n            // Format extracted data for preview\n            const previewData = (0,_utils_accessDataParser__WEBPACK_IMPORTED_MODULE_3__.formatExtractedDataForPreview)(extractedData);\n            setParsedData({\n                headers: [\n                    \"Field\",\n                    \"Value\"\n                ],\n                rows: previewData\n            });\n            return;\n        }\n        // Fallback to traditional tab/comma-delimited parsing\n        const lines = rawData.trim().split(\"\\n\");\n        if (lines.length === 0) return;\n        // Parse first line as headers\n        const firstLine = lines[0];\n        let columns = firstLine.split(\"\t\");\n        if (columns.length === 1) {\n            columns = firstLine.split(\",\");\n        }\n        const headers = columns.map((col)=>col.trim());\n        // Parse data rows\n        const rows = [];\n        for(let i = 1; i < lines.length; i++){\n            const line = lines[i];\n            let rowColumns = line.split(\"\t\");\n            if (rowColumns.length === 1 && !line.includes(\"\t\")) {\n                rowColumns = line.split(\",\");\n            }\n            if (rowColumns.length > 0) {\n                rows.push(rowColumns.map((col)=>col.trim()));\n            }\n        }\n        setParsedData({\n            headers,\n            rows\n        });\n    };\n    const processData = ()=>{\n        if (parsedData.rows.length === 0) return;\n        // Check if this is Access database format (Field/Value pairs)\n        if (parsedData.headers[0] === \"Field\" && parsedData.headers[1] === \"Value\") {\n            // Direct mapping from Access parser\n            const newRecord = {};\n            parsedData.rows.forEach((param)=>{\n                let [field, value] = param;\n                const fieldLower = field.toLowerCase();\n                if (fieldLower.includes(\"crm\")) newRecord.crmId = value;\n                else if (fieldLower.includes(\"name\") && !fieldLower.includes(\"first\") && !fieldLower.includes(\"last\")) {\n                    // Split full name\n                    const nameParts = value.trim().split(/\\s+/);\n                    if (nameParts.length >= 2) {\n                        newRecord.firstName = nameParts[0];\n                        newRecord.lastName = nameParts[nameParts.length - 1];\n                    }\n                } else if (fieldLower.includes(\"ssn\")) newRecord.ssn = value;\n                else if (fieldLower.includes(\"dob\")) newRecord.dob = value;\n                else if (fieldLower.includes(\"gender\")) newRecord.gender = value;\n                else if (fieldLower.includes(\"phone 1\") || fieldLower.includes(\"phone1\") || fieldLower === \"phone\" && !newRecord.phone1) newRecord.phone1 = value;\n                else if (fieldLower.includes(\"phone 2\") || fieldLower.includes(\"phone2\")) newRecord.phone2 = value;\n                else if (fieldLower.includes(\"phone 3\") || fieldLower.includes(\"phone3\")) newRecord.phone3 = value;\n                else if (fieldLower.includes(\"email\")) newRecord.email = value;\n                else if (fieldLower.includes(\"address\") && !fieldLower.includes(\"city\") && !fieldLower.includes(\"state\")) {\n                    newRecord.streetAddress1 = value;\n                    newRecord.fullAddress = value;\n                } else if (fieldLower.includes(\"city\")) newRecord.city = value;\n                else if (fieldLower.includes(\"state\")) newRecord.state = value;\n                else if (fieldLower.includes(\"zip\")) newRecord.zipCode = value;\n                else if (fieldLower.includes(\"insurance\")) newRecord.insuranceCompany = value;\n                else if (fieldLower.includes(\"payment type\")) newRecord.typeOfPayment = value;\n                else if (fieldLower.includes(\"payment amount\") || fieldLower === \"amount\") newRecord.paymentAmount = value;\n                else if (fieldLower.includes(\"frequency\")) newRecord.paymentFrequency = value;\n                else if (fieldLower.includes(\"annual increase\")) newRecord.annualIncrease = value;\n            });\n            setCurrentRecord(newRecord);\n            return;\n        }\n        // Traditional tab/comma-delimited format\n        const firstRow = parsedData.rows[0];\n        const newRecord = {};\n        // Map each field based on header matching\n        Object.keys(fieldMappings).forEach((fieldKey)=>{\n            const possibleHeaders = fieldMappings[fieldKey];\n            const columnIndex = parsedData.headers.findIndex((header)=>possibleHeaders.some((ph)=>header.toLowerCase().includes(ph.toLowerCase())));\n            if (columnIndex !== -1 && firstRow[columnIndex]) {\n                newRecord[fieldKey] = firstRow[columnIndex].trim();\n            }\n        });\n        setCurrentRecord(newRecord);\n    };\n    const handleFieldChange = (field, value)=>{\n        setCurrentRecord((prev)=>({\n                ...prev,\n                [field]: value\n            }));\n    };\n    const handleCompleteAndNext = ()=>{\n        // Save current record to completed records\n        setCompletedRecords((prev)=>[\n                ...prev,\n                currentRecord\n            ]);\n        // Clear current record for next entry\n        setCurrentRecord({});\n        // Clear raw data and parsed data\n        setRawData(\"\");\n        setParsedData({\n            headers: [],\n            rows: []\n        });\n    };\n    const exportToExcel = ()=>{\n        if (completedRecords.length === 0) return;\n        // Excel headers - current structure\n        const headers = [\n            \"CRM ID\",\n            \"First Name\",\n            \"Last Name\",\n            \"SSN\",\n            \"DOB\",\n            \"Age\",\n            \"Gender\",\n            \"Phone 1\",\n            \"Phone 2\",\n            \"Phone 3\",\n            \"Email\",\n            \"Insurance Company\",\n            \"Payment Type\",\n            \"Payment Frequency\",\n            \"Start Date\",\n            \"End Date\",\n            \"Amount\",\n            \"Annual Increase\",\n            \"Full Address\",\n            \"Street Address 1\",\n            \"Street Address 2\",\n            \"City\",\n            \"State\",\n            \"ZIP Code\"\n        ];\n        const wsData = [\n            headers,\n            ...completedRecords.map((record)=>[\n                    record.crmId || \"\",\n                    record.firstName || \"\",\n                    record.lastName || \"\",\n                    record.ssn || \"\",\n                    record.dob || \"\",\n                    record.age || \"\",\n                    record.gender || \"\",\n                    record.phone1 || \"\",\n                    record.phone2 || \"\",\n                    record.phone3 || \"\",\n                    record.email || \"\",\n                    record.insuranceCompany || \"\",\n                    record.typeOfPayment || \"\",\n                    record.paymentFrequency || \"\",\n                    record.paymentStartDate || \"\",\n                    record.paymentEndDate || \"\",\n                    record.paymentAmount || \"\",\n                    record.annualIncrease || \"0\",\n                    record.fullAddress || \"\",\n                    record.streetAddress1 || \"\",\n                    record.streetAddress2 || \"\",\n                    record.city || \"\",\n                    record.state || \"\",\n                    record.zipCode || \"\"\n                ])\n        ];\n        const ws = xlsx__WEBPACK_IMPORTED_MODULE_5__.utils.aoa_to_sheet(wsData);\n        const wb = xlsx__WEBPACK_IMPORTED_MODULE_5__.utils.book_new();\n        xlsx__WEBPACK_IMPORTED_MODULE_5__.utils.book_append_sheet(wb, ws, \"Scrubbed Data\");\n        xlsx__WEBPACK_IMPORTED_MODULE_5__.writeFile(wb, \"scrubbed-data.xlsx\");\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"min-h-screen bg-gray-50 flex\",\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components__WEBPACK_IMPORTED_MODULE_2__.Sidebar, {\n                uploadedFile: uploadedFile,\n                completedRecords: completedRecords,\n                onFileUpload: handleFileUpload,\n                onExport: exportToExcel,\n                onCompleteAndNext: handleCompleteAndNext,\n                hasCurrentRecord: Object.keys(currentRecord).length > 0,\n                onHardReset: handleHardReset,\n                hasStoredData: (0,_utils_localStorage__WEBPACK_IMPORTED_MODULE_4__.hasStoredData)()\n            }, void 0, false, {\n                fileName: \"C:\\\\Users\\\\ofran\\\\Desktop\\\\Srubging Sheet\\\\app\\\\page.tsx\",\n                lineNumber: 316,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"flex-1 p-4 flex flex-col\",\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"flex-[2] mb-3\",\n                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components__WEBPACK_IMPORTED_MODULE_2__.OrganizedDataSection, {\n                            currentRecord: currentRecord,\n                            onFieldChange: handleFieldChange\n                        }, void 0, false, {\n                            fileName: \"C:\\\\Users\\\\ofran\\\\Desktop\\\\Srubging Sheet\\\\app\\\\page.tsx\",\n                            lineNumber: 330,\n                            columnNumber: 11\n                        }, this)\n                    }, void 0, false, {\n                        fileName: \"C:\\\\Users\\\\ofran\\\\Desktop\\\\Srubging Sheet\\\\app\\\\page.tsx\",\n                        lineNumber: 329,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"flex-[3]\",\n                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components__WEBPACK_IMPORTED_MODULE_2__.CutPasteSection, {\n                            rawData: rawData,\n                            parsedData: parsedData,\n                            onRawDataChange: setRawData,\n                            onParseData: parseRawData,\n                            onProcessData: processData\n                        }, void 0, false, {\n                            fileName: \"C:\\\\Users\\\\ofran\\\\Desktop\\\\Srubging Sheet\\\\app\\\\page.tsx\",\n                            lineNumber: 338,\n                            columnNumber: 11\n                        }, this)\n                    }, void 0, false, {\n                        fileName: \"C:\\\\Users\\\\ofran\\\\Desktop\\\\Srubging Sheet\\\\app\\\\page.tsx\",\n                        lineNumber: 337,\n                        columnNumber: 9\n                    }, this)\n                ]\n            }, void 0, true, {\n                fileName: \"C:\\\\Users\\\\ofran\\\\Desktop\\\\Srubging Sheet\\\\app\\\\page.tsx\",\n                lineNumber: 327,\n                columnNumber: 7\n            }, this)\n        ]\n    }, void 0, true, {\n        fileName: \"C:\\\\Users\\\\ofran\\\\Desktop\\\\Srubging Sheet\\\\app\\\\page.tsx\",\n        lineNumber: 315,\n        columnNumber: 5\n    }, this);\n}\n_s(DataScrubber, \"vGSXDo5RDbydFSk9n88mqG5WAlM=\");\n_c = DataScrubber;\nvar _c;\n$RefreshReg$(_c, \"DataScrubber\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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V0FBVTtrQ0FDYiw0RUFBQy9HLDZEQUFvQkE7NEJBQ25CaUIsZUFBZUE7NEJBQ2ZvRyxlQUFlcEI7Ozs7Ozs7Ozs7O2tDQUtuQiw4REFBQ2E7d0JBQUlDLFdBQVU7a0NBQ2IsNEVBQUM5Ryx3REFBZUE7NEJBQ2RVLFNBQVNBOzRCQUNURSxZQUFZQTs0QkFDWnlHLGlCQUFpQjFHOzRCQUNqQjJHLGFBQWF4RDs0QkFDYnlELGVBQWV6Qzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFNM0I7R0FqVHdCdkU7S0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vYXBwL3BhZ2UudHN4Pzc2MDMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBjbGllbnQnXG5cbmltcG9ydCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCdcbmltcG9ydCAqIGFzIFhMU1ggZnJvbSAneGxzeCdcbmltcG9ydCB7IFNpZGViYXIsIE9yZ2FuaXplZERhdGFTZWN0aW9uLCBDdXRQYXN0ZVNlY3Rpb24gfSBmcm9tICcuLi9jb21wb25lbnRzJ1xuaW1wb3J0IHsgcGFyc2VBY2Nlc3NEYXRhLCBmb3JtYXRFeHRyYWN0ZWREYXRhRm9yUHJldmlldyB9IGZyb20gJy4uL3V0aWxzL2FjY2Vzc0RhdGFQYXJzZXInXG5pbXBvcnQgeyBzYXZlVG9Mb2NhbFN0b3JhZ2UsIGxvYWRGcm9tTG9jYWxTdG9yYWdlLCBjbGVhckxvY2FsU3RvcmFnZSwgaGFzU3RvcmVkRGF0YSB9IGZyb20gJy4uL3V0aWxzL2xvY2FsU3RvcmFnZSdcblxuaW50ZXJmYWNlIFBhcnNlZERhdGEge1xuICBoZWFkZXJzOiBzdHJpbmdbXVxuICByb3dzOiBzdHJpbmdbXVtdXG59XG5cbmludGVyZmFjZSBQcmljaW5nUmVjb3JkIHtcbiAgLy8gQ2xpZW50IEluZm9ybWF0aW9uXG4gIGNybUlkOiBzdHJpbmdcbiAgZmlyc3ROYW1lOiBzdHJpbmdcbiAgbGFzdE5hbWU6IHN0cmluZ1xuICBzc246IHN0cmluZ1xuICBkb2I6IHN0cmluZ1xuICBhZ2U6IHN0cmluZ1xuICBnZW5kZXI6IHN0cmluZ1xuICBwaG9uZTE6IHN0cmluZ1xuICBwaG9uZTI6IHN0cmluZ1xuICBwaG9uZTM6IHN0cmluZ1xuICBlbWFpbDogc3RyaW5nXG4gIC8vIFByaWNpbmcgRmllbGRzIChmb3IgbGF0ZXIpXG4gIGluc3VyYW5jZUNvbXBhbnk6IHN0cmluZ1xuICB0eXBlT2ZQYXltZW50OiBzdHJpbmdcbiAgcGF5bWVudEZyZXF1ZW5jeTogc3RyaW5nXG4gIHBheW1lbnRTdGFydERhdGU6IHN0cmluZ1xuICBwYXltZW50RW5kRGF0ZTogc3RyaW5nXG4gIHBheW1lbnRBbW91bnQ6IHN0cmluZ1xuICBhbm51YWxJbmNyZWFzZTogc3RyaW5nXG4gIC8vIEFkZHJlc3MgRmllbGRzXG4gIGZ1bGxBZGRyZXNzOiBzdHJpbmdcbiAgc3RyZWV0QWRkcmVzczE6IHN0cmluZ1xuICBzdHJlZXRBZGRyZXNzMjogc3RyaW5nXG4gIGNpdHk6IHN0cmluZ1xuICBzdGF0ZTogc3RyaW5nXG4gIHppcENvZGU6IHN0cmluZ1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBEYXRhU2NydWJiZXIoKSB7XG4gIGNvbnN0IFt1cGxvYWRlZEZpbGUsIHNldFVwbG9hZGVkRmlsZV0gPSB1c2VTdGF0ZTxGaWxlIHwgbnVsbD4obnVsbClcbiAgY29uc3QgW3Jhd0RhdGEsIHNldFJhd0RhdGFdID0gdXNlU3RhdGUoJycpXG4gIGNvbnN0IFtwYXJzZWREYXRhLCBzZXRQYXJzZWREYXRhXSA9IHVzZVN0YXRlPFBhcnNlZERhdGE+KHsgaGVhZGVyczogW10sIHJvd3M6IFtdIH0pXG4gIGNvbnN0IFtjdXJyZW50UmVjb3JkLCBzZXRDdXJyZW50UmVjb3JkXSA9IHVzZVN0YXRlPFByaWNpbmdSZWNvcmQ+KHt9IGFzIFByaWNpbmdSZWNvcmQpXG4gIGNvbnN0IFtjb21wbGV0ZWRSZWNvcmRzLCBzZXRDb21wbGV0ZWRSZWNvcmRzXSA9IHVzZVN0YXRlPFByaWNpbmdSZWNvcmRbXT4oW10pXG4gIGNvbnN0IFtpc0RhdGFMb2FkZWQsIHNldElzRGF0YUxvYWRlZF0gPSB1c2VTdGF0ZShmYWxzZSlcblxuICAvLyBMb2FkIGRhdGEgZnJvbSBsb2NhbFN0b3JhZ2Ugb24gY29tcG9uZW50IG1vdW50XG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgY29uc3Qgc2F2ZWREYXRhID0gbG9hZEZyb21Mb2NhbFN0b3JhZ2UoKVxuICAgIGlmIChzYXZlZERhdGEpIHtcbiAgICAgIHNldFVwbG9hZGVkRmlsZShzYXZlZERhdGEudXBsb2FkZWRGaWxlIHx8IG51bGwpXG4gICAgICBzZXRSYXdEYXRhKHNhdmVkRGF0YS5yYXdEYXRhIHx8ICcnKVxuICAgICAgc2V0UGFyc2VkRGF0YShzYXZlZERhdGEucGFyc2VkRGF0YSB8fCB7IGhlYWRlcnM6IFtdLCByb3dzOiBbXSB9KVxuICAgICAgc2V0Q3VycmVudFJlY29yZCgoc2F2ZWREYXRhLmN1cnJlbnRSZWNvcmQgfHwge30pIGFzIFByaWNpbmdSZWNvcmQpXG4gICAgICBzZXRDb21wbGV0ZWRSZWNvcmRzKChzYXZlZERhdGEuY29tcGxldGVkUmVjb3JkcyB8fCBbXSkgYXMgUHJpY2luZ1JlY29yZFtdKVxuICAgIH1cbiAgICAvLyBBbHdheXMgc2V0IGlzRGF0YUxvYWRlZCB0byB0cnVlIGFmdGVyIG1vdW50LCBldmVuIGlmIG5vIHNhdmVkIGRhdGFcbiAgICBzZXRJc0RhdGFMb2FkZWQodHJ1ZSlcbiAgfSwgW10pXG5cbiAgLy8gU2F2ZSBkYXRhIHRvIGxvY2FsU3RvcmFnZSB3aGVuZXZlciBzdGF0ZSBjaGFuZ2VzIChkZWJvdW5jZWQpXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKGlzRGF0YUxvYWRlZCkge1xuICAgICAgY29uc3QgdGltZW91dElkID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIHNhdmVUb0xvY2FsU3RvcmFnZSh7XG4gICAgICAgICAgdXBsb2FkZWRGaWxlLFxuICAgICAgICAgIHJhd0RhdGEsXG4gICAgICAgICAgcGFyc2VkRGF0YSxcbiAgICAgICAgICBjdXJyZW50UmVjb3JkLFxuICAgICAgICAgIGNvbXBsZXRlZFJlY29yZHNcbiAgICAgICAgfSlcbiAgICAgIH0sIDEwMDApIC8vIFNhdmUgYWZ0ZXIgMSBzZWNvbmQgb2YgaW5hY3Rpdml0eVxuXG4gICAgICByZXR1cm4gKCkgPT4gY2xlYXJUaW1lb3V0KHRpbWVvdXRJZClcbiAgICB9XG4gIH0sIFt1cGxvYWRlZEZpbGUsIHJhd0RhdGEsIHBhcnNlZERhdGEsIGN1cnJlbnRSZWNvcmQsIGNvbXBsZXRlZFJlY29yZHMsIGlzRGF0YUxvYWRlZF0pXG5cbiAgLy8gSGFyZCByZXNldCBmdW5jdGlvblxuICBjb25zdCBoYW5kbGVIYXJkUmVzZXQgPSAoKSA9PiB7XG4gICAgaWYgKHdpbmRvdy5jb25maXJtKCdBcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gcmVzZXQgYWxsIGRhdGE/IFRoaXMgY2Fubm90IGJlIHVuZG9uZS4nKSkge1xuICAgICAgLy8gQ2xlYXIgYWxsIHN0YXRlXG4gICAgICBzZXRVcGxvYWRlZEZpbGUobnVsbClcbiAgICAgIHNldFJhd0RhdGEoJycpXG4gICAgICBzZXRQYXJzZWREYXRhKHsgaGVhZGVyczogW10sIHJvd3M6IFtdIH0pXG4gICAgICBzZXRDdXJyZW50UmVjb3JkKHt9IGFzIFByaWNpbmdSZWNvcmQpXG4gICAgICBzZXRDb21wbGV0ZWRSZWNvcmRzKFtdKVxuXG4gICAgICAvLyBDbGVhciBsb2NhbFN0b3JhZ2VcbiAgICAgIGNsZWFyTG9jYWxTdG9yYWdlKClcblxuICAgICAgLy8gU2hvdyBjb25maXJtYXRpb25cbiAgICAgIGFsZXJ0KCdBbGwgZGF0YSBoYXMgYmVlbiByZXNldC4gUGFnZSB3aWxsIHJlbG9hZC4nKVxuICAgICAgd2luZG93LmxvY2F0aW9uLnJlbG9hZCgpXG4gICAgfVxuICB9XG5cbiAgLy8gRmllbGQgbWFwcGluZyBjb25maWd1cmF0aW9uIGZvciBhdXRvLXBvcHVsYXRpb25cbiAgY29uc3QgZmllbGRNYXBwaW5nczogUmVjb3JkPHN0cmluZywgc3RyaW5nW10+ID0ge1xuICAgIGNybUlkOiBbJ2NybScsICdpZCcsICdjbGllbnQgaWQnLCAnY3VzdG9tZXIgaWQnLCAnY3JtIGlkJ10sXG4gICAgZmlyc3ROYW1lOiBbJ2ZpcnN0IG5hbWUnLCAnZmlyc3RuYW1lJywgJ2ZuYW1lJywgJ2dpdmVuIG5hbWUnLCAnZmlyc3QnXSxcbiAgICBsYXN0TmFtZTogWydsYXN0IG5hbWUnLCAnbGFzdG5hbWUnLCAnbG5hbWUnLCAnc3VybmFtZScsICdmYW1pbHkgbmFtZScsICdsYXN0J10sXG4gICAgc3NuOiBbJ3NzbicsICdzb2NpYWwgc2VjdXJpdHknLCAnc29jaWFsIHNlY3VyaXR5IG51bWJlcicsICdzcyMnXSxcbiAgICBkb2I6IFsnZG9iJywgJ2RhdGUgb2YgYmlydGgnLCAnYmlydGggZGF0ZScsICdiaXJ0aGRhdGUnLCAnYmlydGhkYXknXSxcbiAgICBhZ2U6IFsnYWdlJ10sXG4gICAgZ2VuZGVyOiBbJ2dlbmRlcicsICdzZXgnLCAnZ2VuJ10sXG4gICAgcGhvbmUxOiBbJ3Bob25lIDEnLCAncGhvbmUxJywgJ21haW4gcGhvbmUnLCAncHJpbWFyeSBwaG9uZScsICdwaG9uZSddLFxuICAgIHBob25lMjogWydwaG9uZSAyJywgJ3Bob25lMicsICdzZWNvbmRhcnkgcGhvbmUnLCAnYWx0ZXJuYXRlIHBob25lJ10sXG4gICAgcGhvbmUzOiBbJ3Bob25lIDMnLCAncGhvbmUzJywgJ3RoaXJkIHBob25lJ10sXG4gICAgZW1haWw6IFsnZW1haWwnLCAnZS1tYWlsJywgJ2VtYWlsIGFkZHJlc3MnXSxcbiAgICBpbnN1cmFuY2VDb21wYW55OiBbJ2luc3VyYW5jZScsICdpbnN1cmFuY2UgY29tcGFueScsICdpbnN1cmVyJywgJ2NhcnJpZXInXSxcbiAgICB0eXBlT2ZQYXltZW50OiBbJ3BheW1lbnQgdHlwZScsICd0eXBlIG9mIHBheW1lbnQnLCAncGF5bWVudCBtZXRob2QnLCAndHlwZSddLFxuICAgIHBheW1lbnRGcmVxdWVuY3k6IFsnZnJlcXVlbmN5JywgJ3BheW1lbnQgZnJlcXVlbmN5JywgJ3BheSBmcmVxdWVuY3knXSxcbiAgICBwYXltZW50U3RhcnREYXRlOiBbJ3N0YXJ0IGRhdGUnLCAnYmVnaW4gZGF0ZScsICdlZmZlY3RpdmUgZGF0ZSddLFxuICAgIHBheW1lbnRFbmREYXRlOiBbJ2VuZCBkYXRlJywgJ2V4cGlyYXRpb24gZGF0ZScsICdtYXR1cml0eSBkYXRlJ10sXG4gICAgcGF5bWVudEFtb3VudDogWydhbW91bnQnLCAncGF5bWVudCBhbW91bnQnLCAncGF5bWVudCcsICdwcmVtaXVtJ10sXG4gICAgYW5udWFsSW5jcmVhc2U6IFsnYW5udWFsIGluY3JlYXNlJywgJ3llYXJseSBpbmNyZWFzZScsICdpbmNyZWFzZSddLFxuICAgIGZ1bGxBZGRyZXNzOiBbJ2FkZHJlc3MnLCAnZnVsbCBhZGRyZXNzJywgJ2NvbXBsZXRlIGFkZHJlc3MnLCAnaG9tZSBhZGRyZXNzJ10sXG4gICAgc3RyZWV0QWRkcmVzczE6IFsnc3RyZWV0JywgJ3N0cmVldCBhZGRyZXNzJywgJ2FkZHJlc3MgbGluZSAxJywgJ3N0cmVldCAxJywgJ3N0cmVldCBhZGRyZXNzIDEnXSxcbiAgICBzdHJlZXRBZGRyZXNzMjogWydzdHJlZXQgMicsICdhZGRyZXNzIGxpbmUgMicsICdhcHQnLCAnc3VpdGUnLCAndW5pdCddLFxuICAgIGNpdHk6IFsnY2l0eScsICd0b3duJ10sXG4gICAgc3RhdGU6IFsnc3RhdGUnLCAncHJvdmluY2UnXSxcbiAgICB6aXBDb2RlOiBbJ3ppcCcsICd6aXAgY29kZScsICdwb3N0YWwgY29kZScsICdwb3N0YWwnLCAnemlwY29kZSddXG4gIH1cblxuICBjb25zdCBoYW5kbGVGaWxlVXBsb2FkID0gKGV2ZW50OiBSZWFjdC5DaGFuZ2VFdmVudDxIVE1MSW5wdXRFbGVtZW50PikgPT4ge1xuICAgIGNvbnN0IGZpbGUgPSBldmVudC50YXJnZXQuZmlsZXM/LlswXVxuICAgIGlmIChmaWxlKSB7XG4gICAgICBzZXRVcGxvYWRlZEZpbGUoZmlsZSlcbiAgICAgIC8vIFRPRE86IFBhcnNlIHVwbG9hZGVkIGZpbGVcbiAgICB9XG4gIH1cblxuICBjb25zdCBwYXJzZVJhd0RhdGEgPSAoKSA9PiB7XG4gICAgaWYgKCFyYXdEYXRhLnRyaW0oKSkgcmV0dXJuXG5cbiAgICAvLyBUcnkgaW50ZWxsaWdlbnQgQWNjZXNzIGRhdGFiYXNlIHBhcnNpbmcgZmlyc3RcbiAgICBjb25zdCBleHRyYWN0ZWREYXRhID0gcGFyc2VBY2Nlc3NEYXRhKHJhd0RhdGEpXG4gICAgXG4gICAgaWYgKGV4dHJhY3RlZERhdGEpIHtcbiAgICAgIC8vIEZvcm1hdCBleHRyYWN0ZWQgZGF0YSBmb3IgcHJldmlld1xuICAgICAgY29uc3QgcHJldmlld0RhdGEgPSBmb3JtYXRFeHRyYWN0ZWREYXRhRm9yUHJldmlldyhleHRyYWN0ZWREYXRhKVxuICAgICAgc2V0UGFyc2VkRGF0YSh7XG4gICAgICAgIGhlYWRlcnM6IFsnRmllbGQnLCAnVmFsdWUnXSxcbiAgICAgICAgcm93czogcHJldmlld0RhdGFcbiAgICAgIH0pXG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICAvLyBGYWxsYmFjayB0byB0cmFkaXRpb25hbCB0YWIvY29tbWEtZGVsaW1pdGVkIHBhcnNpbmdcbiAgICBjb25zdCBsaW5lcyA9IHJhd0RhdGEudHJpbSgpLnNwbGl0KCdcXG4nKVxuICAgIGlmIChsaW5lcy5sZW5ndGggPT09IDApIHJldHVyblxuXG4gICAgLy8gUGFyc2UgZmlyc3QgbGluZSBhcyBoZWFkZXJzXG4gICAgY29uc3QgZmlyc3RMaW5lID0gbGluZXNbMF1cbiAgICBsZXQgY29sdW1ucyA9IGZpcnN0TGluZS5zcGxpdCgnXFx0JylcbiAgICBpZiAoY29sdW1ucy5sZW5ndGggPT09IDEpIHtcbiAgICAgIGNvbHVtbnMgPSBmaXJzdExpbmUuc3BsaXQoJywnKVxuICAgIH1cbiAgICBjb25zdCBoZWFkZXJzID0gY29sdW1ucy5tYXAoY29sID0+IGNvbC50cmltKCkpXG5cbiAgICAvLyBQYXJzZSBkYXRhIHJvd3NcbiAgICBjb25zdCByb3dzOiBzdHJpbmdbXVtdID0gW11cbiAgICBmb3IgKGxldCBpID0gMTsgaSA8IGxpbmVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBsaW5lID0gbGluZXNbaV1cbiAgICAgIGxldCByb3dDb2x1bW5zID0gbGluZS5zcGxpdCgnXFx0JylcbiAgICAgIGlmIChyb3dDb2x1bW5zLmxlbmd0aCA9PT0gMSAmJiAhbGluZS5pbmNsdWRlcygnXFx0JykpIHtcbiAgICAgICAgcm93Q29sdW1ucyA9IGxpbmUuc3BsaXQoJywnKVxuICAgICAgfVxuICAgICAgaWYgKHJvd0NvbHVtbnMubGVuZ3RoID4gMCkge1xuICAgICAgICByb3dzLnB1c2gocm93Q29sdW1ucy5tYXAoY29sID0+IGNvbC50cmltKCkpKVxuICAgICAgfVxuICAgIH1cblxuICAgIHNldFBhcnNlZERhdGEoeyBoZWFkZXJzLCByb3dzIH0pXG4gIH1cblxuICBjb25zdCBwcm9jZXNzRGF0YSA9ICgpID0+IHtcbiAgICBpZiAocGFyc2VkRGF0YS5yb3dzLmxlbmd0aCA9PT0gMCkgcmV0dXJuXG5cbiAgICAvLyBDaGVjayBpZiB0aGlzIGlzIEFjY2VzcyBkYXRhYmFzZSBmb3JtYXQgKEZpZWxkL1ZhbHVlIHBhaXJzKVxuICAgIGlmIChwYXJzZWREYXRhLmhlYWRlcnNbMF0gPT09ICdGaWVsZCcgJiYgcGFyc2VkRGF0YS5oZWFkZXJzWzFdID09PSAnVmFsdWUnKSB7XG4gICAgICAvLyBEaXJlY3QgbWFwcGluZyBmcm9tIEFjY2VzcyBwYXJzZXJcbiAgICAgIGNvbnN0IG5ld1JlY29yZDogYW55ID0ge31cbiAgICAgIFxuICAgICAgcGFyc2VkRGF0YS5yb3dzLmZvckVhY2goKFtmaWVsZCwgdmFsdWVdKSA9PiB7XG4gICAgICAgIGNvbnN0IGZpZWxkTG93ZXIgPSBmaWVsZC50b0xvd2VyQ2FzZSgpXG4gICAgICAgIFxuICAgICAgICBpZiAoZmllbGRMb3dlci5pbmNsdWRlcygnY3JtJykpIG5ld1JlY29yZC5jcm1JZCA9IHZhbHVlXG4gICAgICAgIGVsc2UgaWYgKGZpZWxkTG93ZXIuaW5jbHVkZXMoJ25hbWUnKSAmJiAhZmllbGRMb3dlci5pbmNsdWRlcygnZmlyc3QnKSAmJiAhZmllbGRMb3dlci5pbmNsdWRlcygnbGFzdCcpKSB7XG4gICAgICAgICAgLy8gU3BsaXQgZnVsbCBuYW1lXG4gICAgICAgICAgY29uc3QgbmFtZVBhcnRzID0gdmFsdWUudHJpbSgpLnNwbGl0KC9cXHMrLylcbiAgICAgICAgICBpZiAobmFtZVBhcnRzLmxlbmd0aCA+PSAyKSB7XG4gICAgICAgICAgICBuZXdSZWNvcmQuZmlyc3ROYW1lID0gbmFtZVBhcnRzWzBdXG4gICAgICAgICAgICBuZXdSZWNvcmQubGFzdE5hbWUgPSBuYW1lUGFydHNbbmFtZVBhcnRzLmxlbmd0aCAtIDFdXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGZpZWxkTG93ZXIuaW5jbHVkZXMoJ3NzbicpKSBuZXdSZWNvcmQuc3NuID0gdmFsdWVcbiAgICAgICAgZWxzZSBpZiAoZmllbGRMb3dlci5pbmNsdWRlcygnZG9iJykpIG5ld1JlY29yZC5kb2IgPSB2YWx1ZVxuICAgICAgICBlbHNlIGlmIChmaWVsZExvd2VyLmluY2x1ZGVzKCdnZW5kZXInKSkgbmV3UmVjb3JkLmdlbmRlciA9IHZhbHVlXG4gICAgICAgIGVsc2UgaWYgKGZpZWxkTG93ZXIuaW5jbHVkZXMoJ3Bob25lIDEnKSB8fCBmaWVsZExvd2VyLmluY2x1ZGVzKCdwaG9uZTEnKSB8fCAoZmllbGRMb3dlciA9PT0gJ3Bob25lJyAmJiAhbmV3UmVjb3JkLnBob25lMSkpIG5ld1JlY29yZC5waG9uZTEgPSB2YWx1ZVxuICAgICAgICBlbHNlIGlmIChmaWVsZExvd2VyLmluY2x1ZGVzKCdwaG9uZSAyJykgfHwgZmllbGRMb3dlci5pbmNsdWRlcygncGhvbmUyJykpIG5ld1JlY29yZC5waG9uZTIgPSB2YWx1ZVxuICAgICAgICBlbHNlIGlmIChmaWVsZExvd2VyLmluY2x1ZGVzKCdwaG9uZSAzJykgfHwgZmllbGRMb3dlci5pbmNsdWRlcygncGhvbmUzJykpIG5ld1JlY29yZC5waG9uZTMgPSB2YWx1ZVxuICAgICAgICBlbHNlIGlmIChmaWVsZExvd2VyLmluY2x1ZGVzKCdlbWFpbCcpKSBuZXdSZWNvcmQuZW1haWwgPSB2YWx1ZVxuICAgICAgICBlbHNlIGlmIChmaWVsZExvd2VyLmluY2x1ZGVzKCdhZGRyZXNzJykgJiYgIWZpZWxkTG93ZXIuaW5jbHVkZXMoJ2NpdHknKSAmJiAhZmllbGRMb3dlci5pbmNsdWRlcygnc3RhdGUnKSkge1xuICAgICAgICAgIG5ld1JlY29yZC5zdHJlZXRBZGRyZXNzMSA9IHZhbHVlXG4gICAgICAgICAgbmV3UmVjb3JkLmZ1bGxBZGRyZXNzID0gdmFsdWVcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChmaWVsZExvd2VyLmluY2x1ZGVzKCdjaXR5JykpIG5ld1JlY29yZC5jaXR5ID0gdmFsdWVcbiAgICAgICAgZWxzZSBpZiAoZmllbGRMb3dlci5pbmNsdWRlcygnc3RhdGUnKSkgbmV3UmVjb3JkLnN0YXRlID0gdmFsdWVcbiAgICAgICAgZWxzZSBpZiAoZmllbGRMb3dlci5pbmNsdWRlcygnemlwJykpIG5ld1JlY29yZC56aXBDb2RlID0gdmFsdWVcbiAgICAgICAgZWxzZSBpZiAoZmllbGRMb3dlci5pbmNsdWRlcygnaW5zdXJhbmNlJykpIG5ld1JlY29yZC5pbnN1cmFuY2VDb21wYW55ID0gdmFsdWVcbiAgICAgICAgZWxzZSBpZiAoZmllbGRMb3dlci5pbmNsdWRlcygncGF5bWVudCB0eXBlJykpIG5ld1JlY29yZC50eXBlT2ZQYXltZW50ID0gdmFsdWVcbiAgICAgICAgZWxzZSBpZiAoZmllbGRMb3dlci5pbmNsdWRlcygncGF5bWVudCBhbW91bnQnKSB8fCBmaWVsZExvd2VyID09PSAnYW1vdW50JykgbmV3UmVjb3JkLnBheW1lbnRBbW91bnQgPSB2YWx1ZVxuICAgICAgICBlbHNlIGlmIChmaWVsZExvd2VyLmluY2x1ZGVzKCdmcmVxdWVuY3knKSkgbmV3UmVjb3JkLnBheW1lbnRGcmVxdWVuY3kgPSB2YWx1ZVxuICAgICAgICBlbHNlIGlmIChmaWVsZExvd2VyLmluY2x1ZGVzKCdhbm51YWwgaW5jcmVhc2UnKSkgbmV3UmVjb3JkLmFubnVhbEluY3JlYXNlID0gdmFsdWVcbiAgICAgIH0pXG4gICAgICBcbiAgICAgIHNldEN1cnJlbnRSZWNvcmQobmV3UmVjb3JkKVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgLy8gVHJhZGl0aW9uYWwgdGFiL2NvbW1hLWRlbGltaXRlZCBmb3JtYXRcbiAgICBjb25zdCBmaXJzdFJvdyA9IHBhcnNlZERhdGEucm93c1swXVxuICAgIGNvbnN0IG5ld1JlY29yZDogYW55ID0ge31cblxuICAgIC8vIE1hcCBlYWNoIGZpZWxkIGJhc2VkIG9uIGhlYWRlciBtYXRjaGluZ1xuICAgIE9iamVjdC5rZXlzKGZpZWxkTWFwcGluZ3MpLmZvckVhY2goKGZpZWxkS2V5KSA9PiB7XG4gICAgICBjb25zdCBwb3NzaWJsZUhlYWRlcnMgPSBmaWVsZE1hcHBpbmdzW2ZpZWxkS2V5XVxuICAgICAgY29uc3QgY29sdW1uSW5kZXggPSBwYXJzZWREYXRhLmhlYWRlcnMuZmluZEluZGV4KGhlYWRlciA9PlxuICAgICAgICBwb3NzaWJsZUhlYWRlcnMuc29tZShwaCA9PiBoZWFkZXIudG9Mb3dlckNhc2UoKS5pbmNsdWRlcyhwaC50b0xvd2VyQ2FzZSgpKSlcbiAgICAgIClcblxuICAgICAgaWYgKGNvbHVtbkluZGV4ICE9PSAtMSAmJiBmaXJzdFJvd1tjb2x1bW5JbmRleF0pIHtcbiAgICAgICAgbmV3UmVjb3JkW2ZpZWxkS2V5XSA9IGZpcnN0Um93W2NvbHVtbkluZGV4XS50cmltKClcbiAgICAgIH1cbiAgICB9KVxuXG4gICAgc2V0Q3VycmVudFJlY29yZChuZXdSZWNvcmQpXG4gIH1cblxuICBjb25zdCBoYW5kbGVGaWVsZENoYW5nZSA9IChmaWVsZDogc3RyaW5nLCB2YWx1ZTogc3RyaW5nKSA9PiB7XG4gICAgc2V0Q3VycmVudFJlY29yZChwcmV2ID0+ICh7XG4gICAgICAuLi5wcmV2LFxuICAgICAgW2ZpZWxkXTogdmFsdWVcbiAgICB9KSlcbiAgfVxuXG4gIGNvbnN0IGhhbmRsZUNvbXBsZXRlQW5kTmV4dCA9ICgpID0+IHtcbiAgICAvLyBTYXZlIGN1cnJlbnQgcmVjb3JkIHRvIGNvbXBsZXRlZCByZWNvcmRzXG4gICAgc2V0Q29tcGxldGVkUmVjb3JkcyhwcmV2ID0+IFsuLi5wcmV2LCBjdXJyZW50UmVjb3JkXSlcblxuICAgIC8vIENsZWFyIGN1cnJlbnQgcmVjb3JkIGZvciBuZXh0IGVudHJ5XG4gICAgc2V0Q3VycmVudFJlY29yZCh7fSBhcyBQcmljaW5nUmVjb3JkKVxuXG4gICAgLy8gQ2xlYXIgcmF3IGRhdGEgYW5kIHBhcnNlZCBkYXRhXG4gICAgc2V0UmF3RGF0YSgnJylcbiAgICBzZXRQYXJzZWREYXRhKHsgaGVhZGVyczogW10sIHJvd3M6IFtdIH0pXG4gIH1cblxuICBjb25zdCBleHBvcnRUb0V4Y2VsID0gKCkgPT4ge1xuICAgIGlmIChjb21wbGV0ZWRSZWNvcmRzLmxlbmd0aCA9PT0gMCkgcmV0dXJuXG5cbiAgICAvLyBFeGNlbCBoZWFkZXJzIC0gY3VycmVudCBzdHJ1Y3R1cmVcbiAgICBjb25zdCBoZWFkZXJzID0gW1xuICAgICAgJ0NSTSBJRCcsICdGaXJzdCBOYW1lJywgJ0xhc3QgTmFtZScsICdTU04nLCAnRE9CJywgJ0FnZScsICdHZW5kZXInLFxuICAgICAgJ1Bob25lIDEnLCAnUGhvbmUgMicsICdQaG9uZSAzJywgJ0VtYWlsJyxcbiAgICAgICdJbnN1cmFuY2UgQ29tcGFueScsICdQYXltZW50IFR5cGUnLCAnUGF5bWVudCBGcmVxdWVuY3knLFxuICAgICAgJ1N0YXJ0IERhdGUnLCAnRW5kIERhdGUnLCAnQW1vdW50JywgJ0FubnVhbCBJbmNyZWFzZScsXG4gICAgICAnRnVsbCBBZGRyZXNzJywgJ1N0cmVldCBBZGRyZXNzIDEnLCAnU3RyZWV0IEFkZHJlc3MgMicsXG4gICAgICAnQ2l0eScsICdTdGF0ZScsICdaSVAgQ29kZSdcbiAgICBdXG5cbiAgICBjb25zdCB3c0RhdGEgPSBbXG4gICAgICBoZWFkZXJzLFxuICAgICAgLi4uY29tcGxldGVkUmVjb3Jkcy5tYXAocmVjb3JkID0+IFtcbiAgICAgICAgcmVjb3JkLmNybUlkIHx8ICcnLFxuICAgICAgICByZWNvcmQuZmlyc3ROYW1lIHx8ICcnLFxuICAgICAgICByZWNvcmQubGFzdE5hbWUgfHwgJycsXG4gICAgICAgIHJlY29yZC5zc24gfHwgJycsXG4gICAgICAgIHJlY29yZC5kb2IgfHwgJycsXG4gICAgICAgIHJlY29yZC5hZ2UgfHwgJycsXG4gICAgICAgIHJlY29yZC5nZW5kZXIgfHwgJycsXG4gICAgICAgIHJlY29yZC5waG9uZTEgfHwgJycsXG4gICAgICAgIHJlY29yZC5waG9uZTIgfHwgJycsXG4gICAgICAgIHJlY29yZC5waG9uZTMgfHwgJycsXG4gICAgICAgIHJlY29yZC5lbWFpbCB8fCAnJyxcbiAgICAgICAgcmVjb3JkLmluc3VyYW5jZUNvbXBhbnkgfHwgJycsXG4gICAgICAgIHJlY29yZC50eXBlT2ZQYXltZW50IHx8ICcnLFxuICAgICAgICByZWNvcmQucGF5bWVudEZyZXF1ZW5jeSB8fCAnJyxcbiAgICAgICAgcmVjb3JkLnBheW1lbnRTdGFydERhdGUgfHwgJycsXG4gICAgICAgIHJlY29yZC5wYXltZW50RW5kRGF0ZSB8fCAnJyxcbiAgICAgICAgcmVjb3JkLnBheW1lbnRBbW91bnQgfHwgJycsXG4gICAgICAgIHJlY29yZC5hbm51YWxJbmNyZWFzZSB8fCAnMCcsXG4gICAgICAgIHJlY29yZC5mdWxsQWRkcmVzcyB8fCAnJyxcbiAgICAgICAgcmVjb3JkLnN0cmVldEFkZHJlc3MxIHx8ICcnLFxuICAgICAgICByZWNvcmQuc3RyZWV0QWRkcmVzczIgfHwgJycsXG4gICAgICAgIHJlY29yZC5jaXR5IHx8ICcnLFxuICAgICAgICByZWNvcmQuc3RhdGUgfHwgJycsXG4gICAgICAgIHJlY29yZC56aXBDb2RlIHx8ICcnXG4gICAgICBdKVxuICAgIF1cblxuICAgIGNvbnN0IHdzID0gWExTWC51dGlscy5hb2FfdG9fc2hlZXQod3NEYXRhKVxuICAgIGNvbnN0IHdiID0gWExTWC51dGlscy5ib29rX25ldygpXG4gICAgWExTWC51dGlscy5ib29rX2FwcGVuZF9zaGVldCh3Yiwgd3MsICdTY3J1YmJlZCBEYXRhJylcbiAgICBYTFNYLndyaXRlRmlsZSh3YiwgJ3NjcnViYmVkLWRhdGEueGxzeCcpXG4gIH1cblxuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPVwibWluLWgtc2NyZWVuIGJnLWdyYXktNTAgZmxleFwiPlxuICAgICAgPFNpZGViYXJcbiAgICAgICAgdXBsb2FkZWRGaWxlPXt1cGxvYWRlZEZpbGV9XG4gICAgICAgIGNvbXBsZXRlZFJlY29yZHM9e2NvbXBsZXRlZFJlY29yZHN9XG4gICAgICAgIG9uRmlsZVVwbG9hZD17aGFuZGxlRmlsZVVwbG9hZH1cbiAgICAgICAgb25FeHBvcnQ9e2V4cG9ydFRvRXhjZWx9XG4gICAgICAgIG9uQ29tcGxldGVBbmROZXh0PXtoYW5kbGVDb21wbGV0ZUFuZE5leHR9XG4gICAgICAgIGhhc0N1cnJlbnRSZWNvcmQ9e09iamVjdC5rZXlzKGN1cnJlbnRSZWNvcmQpLmxlbmd0aCA+IDB9XG4gICAgICAgIG9uSGFyZFJlc2V0PXtoYW5kbGVIYXJkUmVzZXR9XG4gICAgICAgIGhhc1N0b3JlZERhdGE9e2hhc1N0b3JlZERhdGEoKX1cbiAgICAgIC8+XG5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleC0xIHAtNCBmbGV4IGZsZXgtY29sXCI+XG4gICAgICAgIHsvKiBPcmdhbml6ZWQgRGF0YSBTZWN0aW9uIC0gVGFrZXMgdXAgbGVzcyBzcGFjZSAoNDAlIGhlaWdodCkgKi99XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleC1bMl0gbWItM1wiPlxuICAgICAgICAgIDxPcmdhbml6ZWREYXRhU2VjdGlvblxuICAgICAgICAgICAgY3VycmVudFJlY29yZD17Y3VycmVudFJlY29yZH1cbiAgICAgICAgICAgIG9uRmllbGRDaGFuZ2U9e2hhbmRsZUZpZWxkQ2hhbmdlfVxuICAgICAgICAgIC8+XG4gICAgICAgIDwvZGl2PlxuXG4gICAgICAgIHsvKiBDdXQgJiBQYXN0ZSBTZWN0aW9uIC0gTW9yZSBzcGFjZSBhdCBib3R0b20gKDYwJSBoZWlnaHQpICovfVxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXgtWzNdXCI+XG4gICAgICAgICAgPEN1dFBhc3RlU2VjdGlvblxuICAgICAgICAgICAgcmF3RGF0YT17cmF3RGF0YX1cbiAgICAgICAgICAgIHBhcnNlZERhdGE9e3BhcnNlZERhdGF9XG4gICAgICAgICAgICBvblJhd0RhdGFDaGFuZ2U9e3NldFJhd0RhdGF9XG4gICAgICAgICAgICBvblBhcnNlRGF0YT17cGFyc2VSYXdEYXRhfVxuICAgICAgICAgICAgb25Qcm9jZXNzRGF0YT17cHJvY2Vzc0RhdGF9XG4gICAgICAgICAgLz5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgKVxufVxuIl0sIm5hbWVzIjpbInVzZVN0YXRlIiwidXNlRWZmZWN0IiwiWExTWCIsIlNpZGViYXIiLCJPcmdhbml6ZWREYXRhU2VjdGlvbiIsIkN1dFBhc3RlU2VjdGlvbiIsInBhcnNlQWNjZXNzRGF0YSIsImZvcm1hdEV4dHJhY3RlZERhdGFGb3JQcmV2aWV3Iiwic2F2ZVRvTG9jYWxTdG9yYWdlIiwibG9hZEZyb21Mb2NhbFN0b3JhZ2UiLCJjbGVhckxvY2FsU3RvcmFnZSIsImhhc1N0b3JlZERhdGEiLCJEYXRhU2NydWJiZXIiLCJ1cGxvYWRlZEZpbGUiLCJzZXRVcGxvYWRlZEZpbGUiLCJyYXdEYXRhIiwic2V0UmF3RGF0YSIsInBhcnNlZERhdGEiLCJzZXRQYXJzZWREYXRhIiwiaGVhZGVycyIsInJvd3MiLCJjdXJyZW50UmVjb3JkIiwic2V0Q3VycmVudFJlY29yZCIsImNvbXBsZXRlZFJlY29yZHMiLCJzZXRDb21wbGV0ZWRSZWNvcmRzIiwiaXNEYXRhTG9hZGVkIiwic2V0SXNEYXRhTG9hZGVkIiwic2F2ZWREYXRhIiwidGltZW91dElkIiwic2V0VGltZW91dCIsImNsZWFyVGltZW91dCIsImhhbmRsZUhhcmRSZXNldCIsIndpbmRvdyIsImNvbmZpcm0iLCJhbGVydCIsImxvY2F0aW9uIiwicmVsb2FkIiwiZmllbGRNYXBwaW5ncyIsImNybUlkIiwiZmlyc3ROYW1lIiwibGFzdE5hbWUiLCJzc24iLCJkb2IiLCJhZ2UiLCJnZW5kZXIiLCJwaG9uZTEiLCJwaG9uZTIiLCJwaG9uZTMiLCJlbWFpbCIsImluc3VyYW5jZUNvbXBhbnkiLCJ0eXBlT2ZQYXltZW50IiwicGF5bWVudEZyZXF1ZW5jeSIsInBheW1lbnRTdGFydERhdGUiLCJwYXltZW50RW5kRGF0ZSIsInBheW1lbnRBbW91bnQiLCJhbm51YWxJbmNyZWFzZSIsImZ1bGxBZGRyZXNzIiwic3RyZWV0QWRkcmVzczEiLCJzdHJlZXRBZGRyZXNzMiIsImNpdHkiLCJzdGF0ZSIsInppcENvZGUiLCJoYW5kbGVGaWxlVXBsb2FkIiwiZXZlbnQiLCJmaWxlIiwidGFyZ2V0IiwiZmlsZXMiLCJwYXJzZVJhd0RhdGEiLCJ0cmltIiwiZXh0cmFjdGVkRGF0YSIsInByZXZpZXdEYXRhIiwibGluZXMiLCJzcGxpdCIsImxlbmd0aCIsImZpcnN0TGluZSIsImNvbHVtbnMiLCJtYXAiLCJjb2wiLCJpIiwibGluZSIsInJvd0NvbHVtbnMiLCJpbmNsdWRlcyIsInB1c2giLCJwcm9jZXNzRGF0YSIsIm5ld1JlY29yZCIsImZvckVhY2giLCJmaWVsZCIsInZhbHVlIiwiZmllbGRMb3dlciIsInRvTG93ZXJDYXNlIiwibmFtZVBhcnRzIiwiZmlyc3RSb3ciLCJPYmplY3QiLCJrZXlzIiwiZmllbGRLZXkiLCJwb3NzaWJsZUhlYWRlcnMiLCJjb2x1bW5JbmRleCIsImZpbmRJbmRleCIsImhlYWRlciIsInNvbWUiLCJwaCIsImhhbmRsZUZpZWxkQ2hhbmdlIiwicHJldiIsImhhbmRsZUNvbXBsZXRlQW5kTmV4dCIsImV4cG9ydFRvRXhjZWwiLCJ3c0RhdGEiLCJyZWNvcmQiLCJ3cyIsInV0aWxzIiwiYW9hX3RvX3NoZWV0Iiwid2IiLCJib29rX25ldyIsImJvb2tfYXBwZW5kX3NoZWV0Iiwid3JpdGVGaWxlIiwiZGl2IiwiY2xhc3NOYW1lIiwib25GaWxlVXBsb2FkIiwib25FeHBvcnQiLCJvbkNvbXBsZXRlQW5kTmV4dCIsImhhc0N1cnJlbnRSZWNvcmQiLCJvbkhhcmRSZXNldCIsIm9uRmllbGRDaGFuZ2UiLCJvblJhd0RhdGFDaGFuZ2UiLCJvblBhcnNlRGF0YSIsIm9uUHJvY2Vzc0RhdGEiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/page.tsx\n"));

/***/ })

});