"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./app/page.tsx":
/*!**********************!*\
  !*** ./app/page.tsx ***!
  \**********************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ DataScrubber; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var xlsx__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! xlsx */ \"(app-pages-browser)/./node_modules/xlsx/xlsx.mjs\");\n/* harmony import */ var _components__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../components */ \"(app-pages-browser)/./components/index.ts\");\n/* harmony import */ var _utils_accessDataParser__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/accessDataParser */ \"(app-pages-browser)/./utils/accessDataParser.ts\");\n/* harmony import */ var _utils_localStorage__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/localStorage */ \"(app-pages-browser)/./utils/localStorage.ts\");\n/* __next_internal_client_entry_do_not_use__ default auto */ \nvar _s = $RefreshSig$();\n\n\n\n\n\nfunction DataScrubber() {\n    _s();\n    const [uploadedFile, setUploadedFile] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [rawData, setRawData] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(\"\");\n    const [parsedData, setParsedData] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n        headers: [],\n        rows: []\n    });\n    const [currentRecord, setCurrentRecord] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({});\n    const [completedRecords, setCompletedRecords] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [isDataLoaded, setIsDataLoaded] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    // Load data from localStorage on component mount\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const savedData = (0,_utils_localStorage__WEBPACK_IMPORTED_MODULE_4__.loadFromLocalStorage)();\n        if (savedData) {\n            setUploadedFile(savedData.uploadedFile || null);\n            setRawData(savedData.rawData || \"\");\n            setParsedData(savedData.parsedData || {\n                headers: [],\n                rows: []\n            });\n            setCurrentRecord(savedData.currentRecord || {});\n            setCompletedRecords(savedData.completedRecords || []);\n        }\n        // Always set isDataLoaded to true after mount, even if no saved data\n        setIsDataLoaded(true);\n    }, []);\n    // Save data to localStorage whenever state changes (debounced)\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (isDataLoaded) {\n            const timeoutId = setTimeout(()=>{\n                (0,_utils_localStorage__WEBPACK_IMPORTED_MODULE_4__.saveToLocalStorage)({\n                    uploadedFile,\n                    rawData,\n                    parsedData,\n                    currentRecord,\n                    completedRecords\n                });\n            }, 1000) // Save after 1 second of inactivity\n            ;\n            return ()=>clearTimeout(timeoutId);\n        }\n    }, [\n        uploadedFile,\n        rawData,\n        parsedData,\n        currentRecord,\n        completedRecords,\n        isDataLoaded\n    ]);\n    // Hard reset function\n    const handleHardReset = ()=>{\n        if (window.confirm(\"Are you sure you want to reset all data? This cannot be undone.\")) {\n            // Clear all state\n            setUploadedFile(null);\n            setRawData(\"\");\n            setParsedData({\n                headers: [],\n                rows: []\n            });\n            setCurrentRecord({});\n            setCompletedRecords([]);\n            // Clear localStorage\n            (0,_utils_localStorage__WEBPACK_IMPORTED_MODULE_4__.clearLocalStorage)();\n            // Show confirmation\n            alert(\"All data has been reset. Page will reload.\");\n            window.location.reload();\n        }\n    };\n    // Field mapping configuration for auto-population\n    const fieldMappings = {\n        crmId: [\n            \"crm\",\n            \"id\",\n            \"client id\",\n            \"customer id\",\n            \"crm id\"\n        ],\n        firstName: [\n            \"first name\",\n            \"firstname\",\n            \"fname\",\n            \"given name\",\n            \"first\"\n        ],\n        lastName: [\n            \"last name\",\n            \"lastname\",\n            \"lname\",\n            \"surname\",\n            \"family name\",\n            \"last\"\n        ],\n        ssn: [\n            \"ssn\",\n            \"social security\",\n            \"social security number\",\n            \"ss#\"\n        ],\n        dob: [\n            \"dob\",\n            \"date of birth\",\n            \"birth date\",\n            \"birthdate\",\n            \"birthday\"\n        ],\n        age: [\n            \"age\"\n        ],\n        gender: [\n            \"gender\",\n            \"sex\",\n            \"gen\"\n        ],\n        phone1: [\n            \"phone 1\",\n            \"phone1\",\n            \"main phone\",\n            \"primary phone\",\n            \"phone\"\n        ],\n        phone2: [\n            \"phone 2\",\n            \"phone2\",\n            \"secondary phone\",\n            \"alternate phone\"\n        ],\n        phone3: [\n            \"phone 3\",\n            \"phone3\",\n            \"third phone\"\n        ],\n        email: [\n            \"email\",\n            \"e-mail\",\n            \"email address\"\n        ],\n        insuranceCompany: [\n            \"insurance\",\n            \"insurance company\",\n            \"insurer\",\n            \"carrier\"\n        ],\n        typeOfPayment: [\n            \"payment type\",\n            \"type of payment\",\n            \"payment method\",\n            \"type\"\n        ],\n        paymentFrequency: [\n            \"frequency\",\n            \"payment frequency\",\n            \"pay frequency\"\n        ],\n        paymentStartDate: [\n            \"start date\",\n            \"begin date\",\n            \"effective date\"\n        ],\n        paymentEndDate: [\n            \"end date\",\n            \"expiration date\",\n            \"maturity date\"\n        ],\n        paymentAmount: [\n            \"amount\",\n            \"payment amount\",\n            \"payment\",\n            \"premium\"\n        ],\n        annualIncrease: [\n            \"annual increase\",\n            \"yearly increase\",\n            \"increase\"\n        ],\n        fullAddress: [\n            \"address\",\n            \"full address\",\n            \"complete address\",\n            \"home address\"\n        ],\n        streetAddress1: [\n            \"street\",\n            \"street address\",\n            \"address line 1\",\n            \"street 1\",\n            \"street address 1\"\n        ],\n        streetAddress2: [\n            \"street 2\",\n            \"address line 2\",\n            \"apt\",\n            \"suite\",\n            \"unit\"\n        ],\n        city: [\n            \"city\",\n            \"town\"\n        ],\n        state: [\n            \"state\",\n            \"province\"\n        ],\n        zipCode: [\n            \"zip\",\n            \"zip code\",\n            \"postal code\",\n            \"postal\",\n            \"zipcode\"\n        ]\n    };\n    const handleFileUpload = (event)=>{\n        var _event_target_files;\n        const file = (_event_target_files = event.target.files) === null || _event_target_files === void 0 ? void 0 : _event_target_files[0];\n        if (file) {\n            setUploadedFile(file);\n        // TODO: Parse uploaded file\n        }\n    };\n    const parseRawData = ()=>{\n        if (!rawData.trim()) return;\n        // Try intelligent Access database parsing first\n        const extractedData = (0,_utils_accessDataParser__WEBPACK_IMPORTED_MODULE_3__.parseAccessData)(rawData);\n        if (extractedData) {\n            // Format extracted data for preview\n            const previewData = (0,_utils_accessDataParser__WEBPACK_IMPORTED_MODULE_3__.formatExtractedDataForPreview)(extractedData);\n            setParsedData({\n                headers: [\n                    \"Field\",\n                    \"Value\"\n                ],\n                rows: previewData\n            });\n            return;\n        }\n        // Fallback to traditional tab/comma-delimited parsing\n        const lines = rawData.trim().split(\"\\n\");\n        if (lines.length === 0) return;\n        // Parse first line as headers\n        const firstLine = lines[0];\n        let columns = firstLine.split(\"\t\");\n        if (columns.length === 1) {\n            columns = firstLine.split(\",\");\n        }\n        const headers = columns.map((col)=>col.trim());\n        // Parse data rows\n        const rows = [];\n        for(let i = 1; i < lines.length; i++){\n            const line = lines[i];\n            let rowColumns = line.split(\"\t\");\n            if (rowColumns.length === 1 && !line.includes(\"\t\")) {\n                rowColumns = line.split(\",\");\n            }\n            if (rowColumns.length > 0) {\n                rows.push(rowColumns.map((col)=>col.trim()));\n            }\n        }\n        setParsedData({\n            headers,\n            rows\n        });\n    };\n    const processData = ()=>{\n        if (parsedData.rows.length === 0) return;\n        // Check if this is Access database format (Field/Value pairs)\n        if (parsedData.headers[0] === \"Field\" && parsedData.headers[1] === \"Value\") {\n            // Direct mapping from Access parser\n            const newRecord = {};\n            parsedData.rows.forEach((param)=>{\n                let [field, value] = param;\n                const fieldLower = field.toLowerCase();\n                if (fieldLower.includes(\"crm\")) newRecord.crmId = value;\n                else if (fieldLower.includes(\"ssn\")) newRecord.ssn = value;\n                else if (fieldLower.includes(\"dob\")) newRecord.dob = value;\n                else if (fieldLower.includes(\"gender\")) newRecord.gender = value;\n                else if (fieldLower.includes(\"phone 1\") || fieldLower.includes(\"phone1\") || fieldLower === \"phone\" && !newRecord.phone1) newRecord.phone1 = value;\n                else if (fieldLower.includes(\"phone 2\") || fieldLower.includes(\"phone2\")) newRecord.phone2 = value;\n                else if (fieldLower.includes(\"phone 3\") || fieldLower.includes(\"phone3\")) newRecord.phone3 = value;\n                else if (fieldLower.includes(\"email\")) newRecord.email = value;\n                else if (fieldLower.includes(\"address\") && !fieldLower.includes(\"city\") && !fieldLower.includes(\"state\")) {\n                    newRecord.streetAddress1 = value;\n                    newRecord.fullAddress = value;\n                } else if (fieldLower.includes(\"city\")) newRecord.city = value;\n                else if (fieldLower.includes(\"state\")) newRecord.state = value;\n                else if (fieldLower.includes(\"zip\")) newRecord.zipCode = value;\n                else if (fieldLower.includes(\"insurance\")) newRecord.insuranceCompany = value;\n                else if (fieldLower.includes(\"payment type\")) newRecord.typeOfPayment = value;\n                else if (fieldLower.includes(\"payment amount\") || fieldLower === \"amount\") newRecord.paymentAmount = value;\n                else if (fieldLower.includes(\"frequency\")) newRecord.paymentFrequency = value;\n                else if (fieldLower.includes(\"annual increase\")) newRecord.annualIncrease = value;\n            });\n            setCurrentRecord(newRecord);\n            return;\n        }\n        // Traditional tab/comma-delimited format\n        const firstRow = parsedData.rows[0];\n        const newRecord = {};\n        // Map each field based on header matching\n        Object.keys(fieldMappings).forEach((fieldKey)=>{\n            const possibleHeaders = fieldMappings[fieldKey];\n            const columnIndex = parsedData.headers.findIndex((header)=>possibleHeaders.some((ph)=>header.toLowerCase().includes(ph.toLowerCase())));\n            if (columnIndex !== -1 && firstRow[columnIndex]) {\n                newRecord[fieldKey] = firstRow[columnIndex].trim();\n            }\n        });\n        setCurrentRecord(newRecord);\n    };\n    const handleFieldChange = (field, value)=>{\n        setCurrentRecord((prev)=>({\n                ...prev,\n                [field]: value\n            }));\n    };\n    const handleCompleteAndNext = ()=>{\n        // Save current record to completed records\n        setCompletedRecords((prev)=>[\n                ...prev,\n                currentRecord\n            ]);\n        // Clear current record for next entry\n        setCurrentRecord({});\n        // Clear raw data and parsed data\n        setRawData(\"\");\n        setParsedData({\n            headers: [],\n            rows: []\n        });\n    };\n    const exportToExcel = ()=>{\n        if (completedRecords.length === 0) return;\n        // Excel headers - current structure\n        const headers = [\n            \"CRM ID\",\n            \"First Name\",\n            \"Last Name\",\n            \"SSN\",\n            \"DOB\",\n            \"Age\",\n            \"Gender\",\n            \"Phone 1\",\n            \"Phone 2\",\n            \"Phone 3\",\n            \"Email\",\n            \"Insurance Company\",\n            \"Payment Type\",\n            \"Payment Frequency\",\n            \"Start Date\",\n            \"End Date\",\n            \"Amount\",\n            \"Annual Increase\",\n            \"Full Address\",\n            \"Street Address 1\",\n            \"Street Address 2\",\n            \"City\",\n            \"State\",\n            \"ZIP Code\"\n        ];\n        const wsData = [\n            headers,\n            ...completedRecords.map((record)=>[\n                    record.crmId || \"\",\n                    record.firstName || \"\",\n                    record.lastName || \"\",\n                    record.ssn || \"\",\n                    record.dob || \"\",\n                    record.age || \"\",\n                    record.gender || \"\",\n                    record.phone1 || \"\",\n                    record.phone2 || \"\",\n                    record.phone3 || \"\",\n                    record.email || \"\",\n                    record.insuranceCompany || \"\",\n                    record.typeOfPayment || \"\",\n                    record.paymentFrequency || \"\",\n                    record.paymentStartDate || \"\",\n                    record.paymentEndDate || \"\",\n                    record.paymentAmount || \"\",\n                    record.annualIncrease || \"0\",\n                    record.fullAddress || \"\",\n                    record.streetAddress1 || \"\",\n                    record.streetAddress2 || \"\",\n                    record.city || \"\",\n                    record.state || \"\",\n                    record.zipCode || \"\"\n                ])\n        ];\n        const ws = xlsx__WEBPACK_IMPORTED_MODULE_5__.utils.aoa_to_sheet(wsData);\n        const wb = xlsx__WEBPACK_IMPORTED_MODULE_5__.utils.book_new();\n        xlsx__WEBPACK_IMPORTED_MODULE_5__.utils.book_append_sheet(wb, ws, \"Scrubbed Data\");\n        xlsx__WEBPACK_IMPORTED_MODULE_5__.writeFile(wb, \"scrubbed-data.xlsx\");\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"min-h-screen bg-gray-50 flex\",\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components__WEBPACK_IMPORTED_MODULE_2__.Sidebar, {\n                uploadedFile: uploadedFile,\n                completedRecords: completedRecords,\n                onFileUpload: handleFileUpload,\n                onExport: exportToExcel,\n                onCompleteAndNext: handleCompleteAndNext,\n                hasCurrentRecord: Object.keys(currentRecord).length > 0,\n                onHardReset: handleHardReset,\n                hasStoredData: (0,_utils_localStorage__WEBPACK_IMPORTED_MODULE_4__.hasStoredData)()\n            }, void 0, false, {\n                fileName: \"C:\\\\Users\\\\ofran\\\\Desktop\\\\Srubging Sheet\\\\app\\\\page.tsx\",\n                lineNumber: 308,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"flex-1 p-4 flex flex-col\",\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"flex-[2] mb-3\",\n                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components__WEBPACK_IMPORTED_MODULE_2__.OrganizedDataSection, {\n                            currentRecord: currentRecord,\n                            onFieldChange: handleFieldChange\n                        }, void 0, false, {\n                            fileName: \"C:\\\\Users\\\\ofran\\\\Desktop\\\\Srubging Sheet\\\\app\\\\page.tsx\",\n                            lineNumber: 322,\n                            columnNumber: 11\n                        }, this)\n                    }, void 0, false, {\n                        fileName: \"C:\\\\Users\\\\ofran\\\\Desktop\\\\Srubging Sheet\\\\app\\\\page.tsx\",\n                        lineNumber: 321,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"flex-[3]\",\n                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components__WEBPACK_IMPORTED_MODULE_2__.CutPasteSection, {\n                            rawData: rawData,\n                            parsedData: parsedData,\n                            onRawDataChange: setRawData,\n                            onParseData: parseRawData,\n                            onProcessData: processData\n                        }, void 0, false, {\n                            fileName: \"C:\\\\Users\\\\ofran\\\\Desktop\\\\Srubging Sheet\\\\app\\\\page.tsx\",\n                            lineNumber: 330,\n                            columnNumber: 11\n                        }, this)\n                    }, void 0, false, {\n                        fileName: \"C:\\\\Users\\\\ofran\\\\Desktop\\\\Srubging Sheet\\\\app\\\\page.tsx\",\n                        lineNumber: 329,\n                        columnNumber: 9\n                    }, this)\n                ]\n            }, void 0, true, {\n                fileName: \"C:\\\\Users\\\\ofran\\\\Desktop\\\\Srubging Sheet\\\\app\\\\page.tsx\",\n                lineNumber: 319,\n                columnNumber: 7\n            }, this)\n        ]\n    }, void 0, true, {\n        fileName: \"C:\\\\Users\\\\ofran\\\\Desktop\\\\Srubging Sheet\\\\app\\\\page.tsx\",\n        lineNumber: 307,\n        columnNumber: 5\n    }, this);\n}\n_s(DataScrubber, \"vGSXDo5RDbydFSk9n88mqG5WAlM=\");\n_c = DataScrubber;\nvar _c;\n$RefreshReg$(_c, \"DataScrubber\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/page.tsx\n"));

/***/ })

});